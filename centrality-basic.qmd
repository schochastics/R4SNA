# Centrality

```{r}
#| label: libraries
#| message: false
library(igraph)
library(netrankr)
library(networkdata)
```

```{r}
#| label: libraries1
#| echo: false
library(ggraph)
```

## Introduction

In this chapter, we learn about network centrality, a key concept for identifying the most influential nodes within networks. 
In a nutshell, a measure of centrality is an index that assigns a numeric values to the nodes of the network. The higher the value, the more central the node. "Being central" is a very ambiguous term and it is thus no surprise that there exists a large variety of 
indices that assess centrality with very different structural properties of the network.

[INSERT PERIODIC TABLE]

## Centrality Indices `igraph`

The package `igraph` implements the following 10 indices:

- degree (`degree()`)
- weighted degree (`strength()`)
- betweenness (`betweenness()`)
- closeness (`closeness()`)
- eigenvector (`eigen_centrality()`)
- alpha centrality (`alpha_centrality()`)
- power centrality (`power_centrality()`)
- PageRank (`page_rank()`)
- eccentricity (`eccentricity()`)
- hubs and authorities (`authority_score()` and `hub_score()`)
- subgraph centrality (`subgraph_centrality()`)

To illustrate some of the indices, we use the "dbces11" graph which is part of the `netrankr` package.
```{r load_dbces}
data("dbces11")
```

```{r}
#| label: dbces11_basic_plot
#| echo: false
ggraph(dbces11, "stress") +
    geom_edge_link0() +
    geom_node_point(shape = 21, size = 10, fill = "grey66") +
    geom_node_text(aes(label = name)) +
    theme_void() +
    coord_equal(clip = "off")
```

**degree** simply counts the number of neighbors a node has.
```{r degree_dbces11}
degree(dbces11)
```

```{r}
#| label: degree_dbces11_plot
#| echo: false
id <- which.max(degree(dbces11))
E(dbces11)$deg <- "no"
E(dbces11)$deg[incident(dbces11, 11)] <- "yes"
ggraph(dbces11, "stress") +
    geom_edge_link(aes(col = deg, width = deg), show.legend = FALSE) +
    geom_node_point(shape = 21, size = 10, fill = "grey66") +
    geom_node_text(aes(label = name)) +
    scale_edge_color_manual(values = c("grey66", "firebrick3")) +
    scale_edge_width_manual(values = c(0.5, 1.5)) +
    theme_void() +
    coord_equal(clip = "off")

```


**closeness** computes the shortest path distances among nodes. The most central node has the
minimum distance to all other nodes (Since high scores are associated with central nodes, the distances are inverted).
```{r}
#| label: closeness_dbces11
closeness(dbces11)
```

The animation below gives an intuition on the calculation for one node.
![](assets/img/closeness.gif)

**betweeness** is the number of shortest paths that pass through a node (divided by the total number of shortest paths)  
```{r}
#| label: betweenness_dbces11
betweenness(dbces11)
```

To get an intuition what it means to have a high betweenness, check the network below.
```{r}
#| label: betweenness_bridge
#| echo: false
Kn1 <- make_full_graph(5)
Kn2 <- make_full_graph(5)

V(Kn1)$name <- LETTERS[1:5]
V(Kn2)$name <- LETTERS[7:11]

B <- Kn1 %u% Kn2
B <- add.vertices(B, 1, attr = list(name = LETTERS[6]))
B <- add.edges(B, c(5, 11, 6, 11))

ggraph(B, "stress") +
    geom_edge_link0(edge_color = "grey66") +
    geom_node_point(shape = 21, size = 8, fill = "grey25") +
    geom_node_point(shape = 21, size = 8, aes(filter = name == "F"), fill = "firebrick3") +
    theme_void()
```

Any shortest path from the right will pass through the red node and vice versa. The 
red note is thus a sort of "gatekeeper" for any information that is passed from left to right.


**eigenvector centrality** extends the idea of degree by assuming that a node is central if it is connected to other central nodes.
```{r}
#| label: eigen_dbces11
eigen_centrality(dbces11)$vector
```

**subgraph centrality** is a bit more abstract but what it does is summing up all closed walks weighting them by the 
inverse factorial of its length.

```{r}
#| label: sub_dbces11
subgraph_centrality(dbces11)
```

The remaining indices are mostly designed for directed networks, **page rank** being the prime example. Note, though that
the indices above can also be applied to directed networks. 

If we highlight the most central node for the calculated indices, we get the following. 
```{r}
#| label: dbces11_plot
#| echo: false
V(dbces11)$cent <- NA
V(dbces11)$cent[which.max(degree(dbces11))] <- "DC"
V(dbces11)$cent[which.max(betweenness(dbces11))] <- "BC"
V(dbces11)$cent[which.max(closeness(dbces11))] <- "CC"
V(dbces11)$cent[which.max(eigen_centrality(dbces11)$vector)] <- "EC"
V(dbces11)$cent[which.max(subgraph_centrality(dbces11))] <- "SC"

ggraph(dbces11, "stress") +
    geom_edge_link0() +
    geom_node_point(shape = 21, size = 10, aes(fill = cent), show.legend = FALSE) +
    geom_node_text(aes(filter = !is.na(cent), label = cent)) +
    theme_void() +
    coord_equal(clip = "off")

```

So each index picks a different node as most central. While this is just a toy example, it highlights how influential the choice of indices can be in empirical settings.


## Centrality indices `sna`
The `sna` package implements roughly the same indices as `igraph` but adds:

- flow betweenness (`flowbet()`)
- load centrality (`loadcent()`)
- Gil-Schmidt Power Index (`gilschmidt()`)
- information centrality (`infocent()`)
- stress centrality (`stresscent()`)

## Other Centrality Packages
There are also some dedicated centrality packages, such as `centiserve`, `CINNA`, `influenceR` and `keyplayer`.
The biggest in terms of implemented indices is currently `centiserve` with a total of 33 indices.
```{r}
#| label: centiserve
library(centiserve)
as.character(lsf.str("package:centiserve"))
```

The description of `CINNA` says
"Functions for computing, comparing and demonstrating top informative centrality measures within a network."
Most of the indices in the package are imported from other package, such as `centiserve`. In addition, there are:

- Dangalchev closeness (`dangalchev_closeness_centrality()`)
- group centrality (`group_centrality()`)
- harmonic closeness (`harmonic_centrality()`)
- local bridging centrality (`local_bridging_centrality()`)

The function `calculate_centralities()` can be used to calculate all applicable indices
to a network. The primary purpose of the package is to facilitate the choice of indices
by visual and statistical tools. If you are interested in the details, see this [tutorial](https://www.datacamp.com/community/tutorials/centrality-network-analysis-R)
and this [vignette](https://cran.r-project.org/web/packages/CINNA/vignettes/CINNA.html).

`influenceR` and `keyplayer` are comparably small packages which implement only a small number of indices.

## Thoughts

The choice of indices can be overwhelming and little guidelines exist on when to choose what.
The worst thing to do in any case is to apply a handful of indices and pick the result that suits your
interpretation best. In best case, you have substantive arguments to apply an index and the result does match the hypothesis (or not).


## Use case: Florentine Families

A classic example application of centrality indices is the "Florentine Families" dataset, which is included in the `networkdata` package.
```{r}
#| label: flo_data
data("flo_marriage")
```

```{r}
#| label: flo_plot
#| echo: false
ggraph(flo_marriage, "stress") +
    geom_edge_link0(edge_color = "grey66") +
    geom_node_point(shape = 21, aes(size = wealth), fill = "grey66", show.legend = FALSE) +
    geom_node_text(aes(size = wealth, label = name), show.legend = FALSE) +
    theme_void()
```

Th network shows marriage ties among Renaissance Families in Florence. Marriages at that time were
strategic to improve the standing of families in society. The size of the names is proportional to the 
wealth of the families. Although the Strozzi were the wealthiest family, it was ultimately the Medici
who became the most powerful family. This is in part due to their central position within this marriage network.

The table bellow shows the ranking for the four most commonly used centrality indices (1=top rank).
```{r}
#| label: centralities_flo
#| echo: false
data.frame(
    name = V(flo_marriage)$name,
    degree = rank(-degree(flo_marriage)),
    betweenness = rank(-betweenness(flo_marriage)),
    closeness = rank(-closeness(flo_marriage)),
    eigen = rank(-eigen_centrality(flo_marriage)$vector)
) |>
    knitr::kable(row.names = FALSE)
```

No matter what structural feature we consider to be important, the Medici always have the most advantageous position.
