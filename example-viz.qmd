# Example Visualizations

```{r}
#| label: libraries
#| include: false
library(igraph)
library(ggraph)
library(graphlayouts)
library(ggforce)
library(networkdata)
```

## Greys Anatomy

Let us work through one visualization using a very special data set. The 
"Grey's Anatomy" hook-up network

```{r}
#| label: load-greys
data("greys")
```

Start with the `autograph` call.

```{r}
#| label: qgraph-ga
autograph(greys)
```

The network consists of several components. Note that the igraph standard is to pack all components
in a circle. The standard in `graphlayouts` is to arrange them in a rectangle. You can specify
the `bbox` parameter to arrange the components differently. The plot above arranges all 
components on one level, but two levels may be desirable. You may need to experiment a bit with
the parameter, but for this network, `bbox=15` seems to work best (see below).

We will use this network to quickly illustrate what can be done with `geom_edge_link2()`.
The function allows to interpolate node attributes between the start and end node 
along the edges. In the code below, we use the "position" attribute. The line which adds the
node labels illustrates two further features of `ggraph`. First, aesthetics don't need to be 
node attributes. Here, for instance, we calculate the degree and then map it to the font size.
The second one is the `repel = TRUE` argument. This option places the node labels in a way that labels do not overlap.
```{r}
#| label: ga-edge2
#| fig-width: 9
#| fig-height: 7
ggraph(greys, "stress", bbox = 15) +
    geom_edge_link2(aes(edge_colour = node.position), edge_linewidth = 0.5) +
    geom_node_point(aes(fill = sex), shape = 21, size = 3) +
    geom_node_text(aes(label = name, size = degree(greys)),
        family = "serif", repel = TRUE
    ) +
    scale_edge_colour_brewer(palette = "Set1") +
    scale_fill_manual(values = c("grey66", "#EEB422", "#424242")) +
    scale_size(range = c(2, 5), guide = "none") +
    theme_graph() +
    theme(legend.position = "bottom")
```

While the coloured edges look kind of artistic, we should go back to the "0" version.

```{r}
#| label: ga-edge0
#| fig-width: 9
#| fig-height: 7
ggraph(greys, "stress", bbox = 15) +
    geom_edge_link0(edge_colour = "grey66", edge_linewidth = 0.5) +
    geom_node_point(aes(fill = sex), shape = 21, size = 3) +
    geom_node_text(aes(label = name, size = degree(greys)),
        family = "serif", repel = TRUE
    ) +
    scale_fill_manual(values = c("grey66", "#EEB422", "#424242")) +
    scale_size(range = c(2, 5), guide = "none") +
    theme_graph() +
    theme(legend.position = "bottom")
```

## Recreate the polblogs viz

In this section, we do a little code through to recreate the figure shown below.

![](assets/img/polblogs_orig.png)
The network shows the linking between political blogs during the 2004 election in the US. Red nodes are conservative leaning blogs and blue ones liberal.

The dataset is included in the `networkdata` package.
```{r}
#| label:  data-polblogs
data("polblogs")

## add a vertex attribute for the indegree
V(polblogs)$deg <- degree(polblogs, mode = "in")
```

Let us start with a simple plot without any styling.
```{r}
#| label: polblogs1
#| fig-width: 10
#| fig-height: 8
lay <- create_layout(polblogs, "stress")

ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 15, length = unit(0.15, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point()
```

There is obviously a lot missing. First, we delete all isolates and plot again. 

```{r}
#| label: polblogs2
#| fig-width: 10
#| fig-height: 8
polblogs <- delete.vertices(polblogs, which(degree(polblogs) == 0))
lay <- create_layout(polblogs, "stress")

ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 15, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point()
```

The original does feature a small disconnected component, but we remove this here.

```{r}
#| label: polblogs2a
#| fig-width: 10
#| fig-height: 8
comps <- components(polblogs)
polblogs <- delete.vertices(polblogs, which(comps$membership == which.min(comps$csize)))

lay <- create_layout(polblogs, "stress")
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 15, length = unit(0.15, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point()
```


Better, let's start with some styling of the nodes.

```{r}
#| label: polblogs3
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 15, length = unit(0.15, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point(shape = 21, aes(fill = pol))
```

The colors are obviously wrong, so we fix this with a `scale_fill_manual()`. Additionally,
we map the degree to node size.

```{r}
#| label: polblogs4
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 15, length = unit(0.15, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3"))
```

The node sizes are also not that satisfactory, so we fix the range with `scale_size()`.

```{r}
#| label: polblogs5
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, edge_colour = "grey66",
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3")) +
    scale_size(range = c(0.5, 7))
```

Now we move on to the edges. This is a bit more complicated since we have to 
create an edge variable first which indicates if an edge is within or between political orientations.
This new variable is mapped to the edge color.

```{r}
#| label: polblogs6
#| fig-width: 10
#| fig-height: 8
el <- get.edgelist(polblogs, names = FALSE)
el_pol <- cbind(V(polblogs)$pol[el[, 1]], V(polblogs)$pol[el[, 2]])
E(polblogs)$col <- ifelse(el_pol[, 1] == el_pol[, 2], el_pol[, 1], "mixed")


lay <- create_layout(polblogs, "stress")
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        )
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3")) +
    scale_size(range = c(0.5, 7))
```

Similar to the node colors, we add a `scale_edge_colour_manual()` to adjust the edge colors.

```{r}
#| label: polblogs7
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        ), show.legend = FALSE
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3")) +
    scale_edge_colour_manual(values = c("left" = "#104E8B", "mixed" = "goldenrod", "right" = "firebrick3")) +
    scale_size(range = c(0.5, 7))
```

Almost, but it seems there are a lot of yellow edges which run over blue edges. It looks as
if these should run below according to the original viz. To achieve this, we use a filter trick.
We add two `geom_edge_link0()` layers: First, for the mixed edges and then for the remaining edges.
In that way, the mixed edges are getting plotted below.

```{r}
#| label: polblogs8
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(filter = (col == "mixed"), edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        ), show.legend = FALSE
    ) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(filter = (col != "mixed"), edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        ), show.legend = FALSE
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3")) +
    scale_edge_colour_manual(values = c("left" = "#104E8B", "mixed" = "goldenrod", "right" = "firebrick3")) +
    scale_size(range = c(0.5, 7))
```

Now lets just add the `theme_graph()`.
```{r}
#| label: polblogs9
#| fig-width: 10
#| fig-height: 8
ggraph(lay) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(filter = (col == "mixed"), edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        ), show.legend = FALSE
    ) +
    geom_edge_link0(
        edge_linewidth = 0.2, aes(filter = (col != "mixed"), edge_colour = col),
        arrow = arrow(
            angle = 10, length = unit(0.1, "inches"),
            ends = "last", type = "closed"
        ), show.legend = FALSE
    ) +
    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +
    scale_fill_manual(values = c("left" = "#104E8B", "right" = "firebrick3")) +
    scale_edge_colour_manual(values = c("left" = "#104E8B", "mixed" = "goldenrod", "right" = "firebrick3")) +
    scale_size(range = c(0.5, 7)) +
    theme_graph()
```

