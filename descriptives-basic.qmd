# Basic Network Statistics

```{r}
#| message: false
library(igraph)
library(networkdata)
```

```{r}
#| include: false
library(ggraph)
```

## Introduction


## Simple Network Characteristics

In the following, we use a network from the `networkdata` package to introduce some basic network statistics.

```{r load_greys}
data("greys")
```

```{r}
#| label: plot_greys
#| echo: false
#| fig-width: 12
#| fig-height: 8
ggraph(greys, "stress", bbox = 10) +
    geom_edge_link0(edge_color = "grey66") +
    geom_node_point(shape = 21, aes(fill = sex), size = 5, show.legend = FALSE) +
    geom_node_text(aes(label = name), repel = TRUE) +
    scale_fill_manual(values = c("grey66", "#E8813A", "#4D189D")) +
    theme_void()
```

The "greys" network consists of characters from the show "Grey's Anatomy" and links indicate who hooked up with whom (up to about 2022).

```{r print_greys}
greys
```


The **density** of a network is defined as the fraction of the potential edges in a network that are actually present.
```{r}
#| label: density
c(
    edge_density(make_empty_graph(10)),
    edge_density(greys),
    edge_density(make_full_graph(10))
)
```

The density of an empty network is $0$ and for the full network it is $1$. The density of empirical network 
is somewhere in between but as the number of nodes increases, we'd expect the density to decrease and the network 
becomes quite sparse.

A **shortest path** is a path that connects two nodes in a network with a minimal number of edges. The length of a shortest path is called the **distance** between two nodes.
```{r}
#| label: shortest_path
shortest_paths(greys,from = "Alex Karev",to = "Owen Hunt",output = "vpath")
```

```{r}
#| label: greys_shortest_path
#| echo: false
#| fig-width: 12
#| fig-height: 8

E(greys)$epath <- FALSE
E(greys)$epath[as.integer(shortest_paths(greys,from = "Alex Karev",to = "Owen Hunt",output = "epath")$epath[[1]])] <- TRUE

ggraph(greys,"stress",bbox=10) + 
  geom_edge_link0(aes(color=epath,width=epath),show.legend = FALSE)+
  geom_node_point(shape=21,aes(fill=sex),size=5,show.legend = FALSE)+
  geom_node_text(aes(label=name),repel = TRUE)+
  scale_fill_manual(values=c("grey66","#E8813A","#4D189D"))+
  scale_edge_color_manual(values=c("grey66","firebrick3"))+
  scale_edge_width_manual(values=c(0.5,1.5))+
  theme_void()

```

```{r}
#| label: distances
distances(greys)[1:10, 1:10]
```

The Grey's Anatomy network is **disconnected** and consists of $4$ **connected components**. There are no 
shortest paths between components, which means that the distance is not measurable and set to infinity.

The length of the longest shortest path is called the **diameter** of the network.
```{r}
#| label: diameter
diameter(greys)
```

```{r}
#| label: greys_diameter
#| echo: false
#| fig-width: 12
#| fig-height: 8

E(greys)$epath <- FALSE
E(greys)$epath[as.integer(shortest_paths(greys,from = "Finn Dandridge",to = "Colin Marlow",output = "epath")$epath[[1]])] <- TRUE

ggraph(greys,"stress",bbox=10) + 
  geom_edge_link0(aes(color=epath,width=epath),show.legend = FALSE)+
  geom_node_point(shape=21,aes(fill=sex),size=5,show.legend = FALSE)+
  geom_node_text(aes(label=name),repel = TRUE)+
  scale_fill_manual(values=c("grey66","#E8813A","#4D189D"))+
  scale_edge_color_manual(values=c("grey66","firebrick3"))+
  scale_edge_width_manual(values=c(0.5,1.5))+
  theme_void()

```


**Transitivity** measures the probability that the neighbors of a node are also connected. This is also called the **clustering coefficient**.  
```{r}
#| label: transitivity
transitivity(greys, type = "global")
transitivity(greys, type = "local", isolates = "zero")
```
The global transitivity of an undirected network is the ratio of the triangles and the connected triples in the network.
Local transitivity of a node is the ratio of the triangles connected to the node and the triples centered on the node itself.
In social networks, we generally assume that the transitivity is quite high ("the friend of my friend is also my friend"). In our 
example, we have zero for all values. This is due to the fact that a triangle would require a same sex hook-up which did not occur (*Disclaimer: I never watched the show and gathered the hook ups from various internet resources. So this may well be wrong.*).

For directed networks, a measure of importance is **reciprocity**, which is defined as the proportion of mutual edges between nodes. To illustrate the measure, we use a network of grooming relations among a group of rhesus monkeys.

```{r}
#| label: reciprocity_example
data("rhesus")
reciprocity(rhesus)
```

About `r round(reciprocity(rhesus)*100)`% of edges are reciprocated in the network. The figure below highlights the reciprocated edges. 

```{r}
#| label: rhesus_net
#| echo: false
E(rhesus)$mutual <- is.mutual(rhesus)
#plot
ggraph(rhesus,"stress")+
  geom_edge_parallel( aes(filter =! mutual), edge_color="grey66", edge_width=0.5,
    arrow = arrow(angle = 15, length = unit(0.15, "inches"),
                  ends = "last", type = "closed"),n=2,end_cap = circle(8,"pt")
    
  )+
  geom_edge_parallel( aes(filter=mutual), edge_color="black", edge_width=0.5,
                      arrow = arrow(angle = 15, length = unit(0.15, "inches"),
                                    ends = "last", type = "closed"),n=2,end_cap = circle(8,"pt")
                      
  )+
  geom_node_point(shape=21,size=8,aes(fill=gender))+
  scale_fill_manual(values=c("#E8813A","#4D189D"),name="")+
  theme_void()+
  theme(legend.position = "bottom")

```

## Dyad and Triad Census

The **dyad census** categorize all possible dyads within a network based on their mutual connection status. It classifies dyads into three categories: mutual (both nodes have a directed edge to the other, i.e. reciprocated), asymmetric (only one node has a directed edge to the other), and null (no directed edges between the nodes). The census provides insights into the overall reciprocity and directionality of relationships in the network, helping to understand the balance between mutual cooperation, one-sided relationships, and absence of direct interaction.

```{r}
#| label: dyad_census
dyad_census(rhesus)
```

More important than the dyad census is usually the **triad census**.
In a directed network, there are 16 possible configurations of edges that can occur between three nodes. 
![](assets/img/triad_census.jpg)

The triad census of a network gives the number of occurrences of each of these triad. Triads are labelled `xyzL` where `x` is the number of reciprocated ties, `y` is the number of unreciprocated ties and `z` is the number of null ties. The `L` term is a letter (U,C,D or T) which allows to differentiate between triads where these numbers are the same. 

```{r}
#| label: triad_census
triad_census(rhesus)

```

## Use case: Triad Census

One of the many applications of the triad census is to compare a set of networks. In this example, we are tackling the question of "how transitive is football?" and assess structural differences among a set of football leagues. 

```{r}
#| label: football_triad
data("football_triad")
```

`football_triad` is a list which contains networks of 112 football leagues as igraph objects. A directed link between
team A and B indicates that A won a match against B. Note that there can also be an edge from B to A,
since most leagues play a double round robin. For the sake of simplicity, all draws were deleted so that
there could also be null ties between two teams if both games ended in a draw.

Below, we calculate the triad census for all network at once using `lapply()`.
The function returns the triad census for each network as a list, which we turn into a matrix
in the second step. Afterwards, we manually add the row and column names of the matrix.

```{r}
#| label: football_census
footy_census <- lapply(football_triad, triad_census)
footy_census <- matrix(unlist(footy_census), ncol = 16, byrow = T)
rownames(footy_census) <- sapply(football_triad, function(x) x$name)
colnames(footy_census) <- c(
    "003", "012", "102", "021D", "021U", "021C", "111D", "111U",
    "030T", "030C", "201", "120D", "120U", "120C", "210", "300"
)

# normalize to make proportions comparable across leagues
footy_census_norm <- footy_census / rowSums(footy_census)

# check the Top 5 leagues
idx <- which(rownames(footy_census) %in% c(
    "england", "spain", "germany",
    "italy", "france"
))
footy_census[idx, ]
```

Notice how the transitive triad (030T) has the largest count in the top leagues, hinting toward the childhood wisdom:
"If A wins against B and B wins against C, then A must win against C".

In empirical studies, we are not necessarily only interested in transitive triads, but rather how the triad census profiles compare across networks. We follow [Kathrine Faust's](https://doi.org/10.1111%2Fj.1467-9531.2007.00179.x) suggestion and do a singular value decomposition (SVD) on the normalized triad census matrix.

```{r svd_footy}
footy_svd <- svd(footy_census_norm)
```

SVDs are used to reduce the dimensionality of the data, but retaining most of the information. In our case, the 
data is 16 dimensional, which is impossible to visualize to compare the networks. With an SVD, we can reduce it to two dimensions and get a better visual overview.

```{r}
#| label: plot_svd_u
#| echo: false
#| fig-width: 12
#| fig-height: 6

data.frame(u1 = footy_svd$d[1]*footy_svd$u[,1], 
           u2 = footy_svd$d[2]*footy_svd$u[,2],
           league = rownames(footy_census)) |>
  ggplot(aes(x=u1,y=u2))+
  geom_point()+
  ggrepel::geom_text_repel(aes(label=league))+
  theme_minimal()+
  theme(axis.title = element_text(size=16))+
  labs(x="First singular vector, multipled by singular value",
       y="Second singular vector, multipled by singular value")

```

How to interpret the dimensions? To investigate this question, we take a closer look at the first two dimensions and compare it to some network descriptives. For the sake of brevity, we here only look at the density and proportion of 030T triads. In
general, any node/dyad/triad level statistic could be used.

```{r}
#| label: svd1_density
#| echo: false
#| fig-width: 12
#| fig-height: 6

data.frame(
    y = footy_svd$d[1] * footy_svd$u[, 1],
    x = sapply(football_triad, graph.density)
) |>
    ggplot(aes(x, y)) +
    geom_point() +
    theme_minimal() +
    theme(axis.title = element_text(size = 16)) +
    labs(x = "density", y = "First singular vector, multipled by singular value")

```

Density doesn't really seem to be related to the first dimension in this case (in many cases it is!). Might be worthwhile to
explore this further

```{r}
#| label: svd2_030T
#| echo: false
#| fig-width: 12
#| fig-height: 6

data.frame(
    y = footy_svd$d[2] * footy_svd$u[, 2],
    x = footy_census_norm[, 9]
) |>
    ggplot(aes(x, y)) +
    geom_point() +
    theme_minimal() +
    theme(axis.title = element_text(size = 16)) +
    labs(x = "fraction of 030T", y = "Second singular vector, multipled by singular value")
```

For the second dimension, we get a clearer association. It seems that the fraction of transitive triads 
is a good indicator for structural differences among leagues.

## Dyad/Triad Census with Attributes

The R package `netUtils` implements a version of the dyad and triad census which can account for node attributes. 

```{r}
#| label: load-netUtils
library(netUtils)
```

The node attribute should be integers from `1` to `max(attr)`. 
The output of `dyad_census_attr()` is a data.frame where each row corresponds to a pair of attribute values and the count of asymmetric, symmetric and null dyads.

The output of `triad_census_attr()` is a named vector where the names are of the form Txxx-abc, where xxx corresponds to the standard triad census notation and "abc" are the attributes of the involved nodes.

```{r}
#| label: rand-attr
set.seed(112)
g <- sample_gnp(20, p = 0.3, directed = TRUE)
# add a vertex attribute
V(g)$type <- rep(1:2, each = 10)

dyad_census_attr(g, "type")
triad_census_attr(g, "type")
```

## Degree distributions

## Scientific Reading
