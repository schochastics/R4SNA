{
  "hash": "30997b8f643556f0cf0537d19579c60c",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n\n\n\n\n\n# Descriptive Network Analysis\n\n## Centrality\nThe package includes all centrality indices implemented in `igraph` and additionally all \nthat are made available in the `netrankr` package. All indices can be found in the \nfunction group `centrality_*()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflo_tidy %>%\n    activate(\"nodes\") %>%\n    mutate(\n        degree = centrality_degree(),\n        betweenness = centrality_betweenness()\n    ) %>%\n    ggraph(\"stress\", bbox = 10) +\n    geom_edge_link0(edge_color = \"black\") +\n    geom_node_point(shape = 21, aes(size = degree, fill = betweenness)) +\n    geom_node_text(aes(label = name)) +\n    scale_fill_gradient(low = \"#104E8B\", high = \"#CD2626\") +\n    scale_size(range = c(4, 10)) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](tidygraph-descriptive_files/figure-html/centrality-example-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Clustering\n\nSimilar to centrality, all clustering algorithms from `igraph` are available via `group_*()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create random graph with group structure (igraph equivalent is sample_islands())\nplay_islands(4, 12, 0.8, 4) %>%\n    mutate(community = as.factor(group_louvain())) %>%\n    ggraph(layout = \"stress\") +\n    geom_edge_link0() +\n    geom_node_point(aes(fill = community), shape = 21, size = 6) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](tidygraph-descriptive_files/figure-html/clustering-example-1.png){width=672}\n:::\n:::\n\n\n\n\nCoupling this with what we learned above, we can color the edges according to the cluster\nthey belong to.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_islands(4, 12, 0.8, 4) %>%\n    mutate(community = as.factor(group_louvain())) %>%\n    activate(\"edges\") %>%\n    mutate(community = as.factor(ifelse(.N()$community[from] == .N()$community[to], .N()$community[from], 5))) %>%\n    ggraph(layout = \"stress\") +\n    geom_edge_link0(aes(edge_colour = community), show.legend = FALSE) +\n    geom_node_point(aes(fill = community), shape = 21, size = 6) +\n    scale_fill_brewer(palette = \"Set3\") +\n    scale_edge_color_brewer(palette = \"Set3\") +\n    theme_graph(background = \"grey88\")\n```\n\n::: {.cell-output-display}\n![](tidygraph-descriptive_files/figure-html/clustering-example2-1.png){width=672}\n:::\n:::\n\n\n\n\n## Other node or edge level functions\n\n`tidygraphs` harmonizes many other available functions in igraph to make them easier accessible.\nThe best way to check what is available is to look at the function groups `node_*()` and `edge_*()`.\nSome simple examples are shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the node id of the Medici is 9\nflo_tidy %>%\n    activate(\"nodes\") %>%\n    mutate(dist2Medici = node_distance_to(nodes = 9)) %>%\n    activate(\"edges\") %>%\n    mutate(edge2Medici = edge_is_incident(9)) %>%\n    ggraph(\"stress\") +\n    geom_edge_link0(aes(edge_color = edge2Medici)) +\n    geom_node_point(aes(fill = dist2Medici), size = 9, shape = 21) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](tidygraph-descriptive_files/figure-html/distance2medici-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "tidygraph-descriptive_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}