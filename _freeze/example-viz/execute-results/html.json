{
  "hash": "c73bace4ccc2cd8f4b2507e8ae78ef45",
  "result": {
    "engine": "knitr",
    "markdown": "# Example Visualizations\n\n\n\n\n\n## Greys Anatomy\n\nLet us work through one visualization using a very special data set. The \n\"Grey's Anatomy\" hook-up network\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"greys\")\n```\n:::\n\n\nStart with the `autograph` call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautograph(greys)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/qgraph-ga-1.png){width=672}\n:::\n:::\n\n\nThe network consists of several components. Note that the igraph standard is to pack all components\nin a circle. The standard in `graphlayouts` is to arrange them in a rectangle. You can specify\nthe `bbox` parameter to arrange the components differently. The plot above arranges all \ncomponents on one level, but two levels may be desirable. You may need to experiment a bit with\nthe parameter, but for this network, `bbox=15` seems to work best (see below).\n\nWe will use this network to quickly illustrate what can be done with `geom_edge_link2()`.\nThe function allows to interpolate node attributes between the start and end node \nalong the edges. In the code below, we use the \"position\" attribute. The line which adds the\nnode labels illustrates two further features of `ggraph`. First, aesthetics don't need to be \nnode attributes. Here, for instance, we calculate the degree and then map it to the font size.\nThe second one is the `repel = TRUE` argument. This option places the node labels in a way that labels do not overlap.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(greys, \"stress\", bbox = 15) +\n    geom_edge_link2(aes(edge_colour = node.position), edge_linewidth = 0.5) +\n    geom_node_point(aes(fill = sex), shape = 21, size = 3) +\n    geom_node_text(aes(label = name, size = degree(greys)),\n        family = \"serif\", repel = TRUE\n    ) +\n    scale_edge_colour_brewer(palette = \"Set1\") +\n    scale_fill_manual(values = c(\"grey66\", \"#EEB422\", \"#424242\")) +\n    scale_size(range = c(2, 5), guide = \"none\") +\n    theme_graph() +\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/ga-edge2-1.png){width=864}\n:::\n:::\n\n\nWhile the coloured edges look kind of artistic, we should go back to the \"0\" version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(greys, \"stress\", bbox = 15) +\n    geom_edge_link0(edge_colour = \"grey66\", edge_linewidth = 0.5) +\n    geom_node_point(aes(fill = sex), shape = 21, size = 3) +\n    geom_node_text(aes(label = name, size = degree(greys)),\n        family = \"serif\", repel = TRUE\n    ) +\n    scale_fill_manual(values = c(\"grey66\", \"#EEB422\", \"#424242\")) +\n    scale_size(range = c(2, 5), guide = \"none\") +\n    theme_graph() +\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/ga-edge0-1.png){width=864}\n:::\n:::\n\n\n## Recreate the polblogs viz\n\nIn this section, we do a little code through to recreate the figure shown below.\n\n![](assets/img/polblogs_orig.png)\nThe network shows the linking between political blogs during the 2004 election in the US. Red nodes are conservative leaning blogs and blue ones liberal.\n\nThe dataset is included in the `networkdata` package.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"polblogs\")\n\n## add a vertex attribute for the indegree\nV(polblogs)$deg <- degree(polblogs, mode = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\n```\n\n\n:::\n:::\n\n\nLet us start with a simple plot without any styling.\n\n::: {.cell}\n\n```{.r .cell-code}\nlay <- create_layout(polblogs, \"stress\")\n\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 15, length = unit(0.15, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point()\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs1-1.png){width=960}\n:::\n:::\n\n\nThere is obviously a lot missing. First, we delete all isolates and plot again. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npolblogs <- delete.vertices(polblogs, which(degree(polblogs) == 0))\nlay <- create_layout(polblogs, \"stress\")\n\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 15, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point()\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs2-1.png){width=960}\n:::\n:::\n\n\nThe original does feature a small disconnected component, but we remove this here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomps <- components(polblogs)\npolblogs <- delete.vertices(polblogs, which(comps$membership == which.min(comps$csize)))\n\nlay <- create_layout(polblogs, \"stress\")\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 15, length = unit(0.15, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point()\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs2a-1.png){width=960}\n:::\n:::\n\n\n\nBetter, let's start with some styling of the nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 15, length = unit(0.15, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs3-1.png){width=960}\n:::\n:::\n\n\nThe colors are obviously wrong, so we fix this with a `scale_fill_manual()`. Additionally,\nwe map the degree to node size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 15, length = unit(0.15, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\"))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs4-1.png){width=960}\n:::\n:::\n\n\nThe node sizes are also not that satisfactory, so we fix the range with `scale_size()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, edge_colour = \"grey66\",\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\")) +\n    scale_size(range = c(0.5, 7))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs5-1.png){width=960}\n:::\n:::\n\n\nNow we move on to the edges. This is a bit more complicated since we have to \ncreate an edge variable first which indicates if an edge is within or between political orientations.\nThis new variable is mapped to the edge color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nel <- get.edgelist(polblogs, names = FALSE)\nel_pol <- cbind(V(polblogs)$pol[el[, 1]], V(polblogs)$pol[el[, 2]])\nE(polblogs)$col <- ifelse(el_pol[, 1] == el_pol[, 2], el_pol[, 1], \"mixed\")\n\n\nlay <- create_layout(polblogs, \"stress\")\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        )\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\")) +\n    scale_size(range = c(0.5, 7))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs6-1.png){width=960}\n:::\n:::\n\n\nSimilar to the node colors, we add a `scale_edge_colour_manual()` to adjust the edge colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        ), show.legend = FALSE\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\")) +\n    scale_edge_colour_manual(values = c(\"left\" = \"#104E8B\", \"mixed\" = \"goldenrod\", \"right\" = \"firebrick3\")) +\n    scale_size(range = c(0.5, 7))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs7-1.png){width=960}\n:::\n:::\n\n\nAlmost, but it seems there are a lot of yellow edges which run over blue edges. It looks as\nif these should run below according to the original viz. To achieve this, we use a filter trick.\nWe add two `geom_edge_link0()` layers: First, for the mixed edges and then for the remaining edges.\nIn that way, the mixed edges are getting plotted below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(filter = (col == \"mixed\"), edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        ), show.legend = FALSE\n    ) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(filter = (col != \"mixed\"), edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        ), show.legend = FALSE\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\")) +\n    scale_edge_colour_manual(values = c(\"left\" = \"#104E8B\", \"mixed\" = \"goldenrod\", \"right\" = \"firebrick3\")) +\n    scale_size(range = c(0.5, 7))\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs8-1.png){width=960}\n:::\n:::\n\n\nNow lets just add the `theme_graph()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(lay) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(filter = (col == \"mixed\"), edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        ), show.legend = FALSE\n    ) +\n    geom_edge_link0(\n        edge_linewidth = 0.2, aes(filter = (col != \"mixed\"), edge_colour = col),\n        arrow = arrow(\n            angle = 10, length = unit(0.1, \"inches\"),\n            ends = \"last\", type = \"closed\"\n        ), show.legend = FALSE\n    ) +\n    geom_node_point(shape = 21, aes(fill = pol, size = deg), show.legend = FALSE) +\n    scale_fill_manual(values = c(\"left\" = \"#104E8B\", \"right\" = \"firebrick3\")) +\n    scale_edge_colour_manual(values = c(\"left\" = \"#104E8B\", \"mixed\" = \"goldenrod\", \"right\" = \"firebrick3\")) +\n    scale_size(range = c(0.5, 7)) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](example-viz_files/figure-html/polblogs9-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "example-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}