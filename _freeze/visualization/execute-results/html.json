{
  "hash": "1c8865c86399afde8423bf1856625e4f",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'igraph'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\n```\n\n\n:::\n:::\n\n\n## Miscellaneous\n\nEverything we covered above should be enough to produce nice network visualizations for scientific publications.\nHowever, `ggraph` has a lot more advanced functions/parameter settings to further enhance your visualization. \nIf you are looking for something specific, it is always a good idea to read the documentation of the geoms. \n\nSome things that I frequently use are the following:\n\n- change the `end_cap` in `geom_edge_link()` to end edges before reaching the node. This is helpful\n  for directed edges to not make the arrows disappear.\n- `legend.position` in `theme()` controls all legends at once. If you don't want to show a specific legend, \n use `guide = \"none\"` in the respective `scale_*` function.\n- use `scale_color_viridis_c()` and `scale_color_viridis_d()`. The viridis colour palette makes plots easier to read by those with colorblindness and print well in grey scale.\n\nThe stress layout also works well with medium to large graphs. \n\n![](assets/img/coauthor_cran.png)\n\nThe network shows the biggest componentn of the co-authorship network of R package developers on CRAN (~12k nodes)\n\nIf you want to go beyond ~20k nodes, then you may want to switch to `layout_with_pmds()` or\n`layout_with_sparse_stress()` which are optimized to work with large graphs.\n\n### use the ggforce\n\nThe `ggforce` package works pretty nicely with `ggraph`. You can, for instance, use\nthe `geom_mark_*()` functions to highlight clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(665)\n\n## create network with a group structure\ng <- sample_islands(9, 40, 0.4, 15)\ng <- igraph::simplify(g)\nV(g)$grp <- as.character(rep(1:9, each = 40))\n\nbb <- layout_as_backbone(g, keep = 0.4)\nE(g)$col <- F\nE(g)$col[bb$backbone] <- T\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, #|\n    layout = \"manual\",\n    x = bb$xy[, 1],\n    y = bb$xy[, 2]\n) +\n    geom_edge_link0(aes(col = col), width = 0.2) +\n    geom_node_point(aes(fill = grp), shape = 21, size = 3) +\n    geom_mark_hull(\n        aes(x, y, group = grp, fill = grp),\n        concavity = 4,\n        expand = unit(2, \"mm\"),\n        alpha = 0.25\n    ) +\n    scale_color_brewer(palette = \"Set1\") +\n    scale_fill_brewer(palette = \"Set1\") +\n    scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3), rgb(0, 0, 0, 1))) +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/network-grps-sol-1.png){width=672}\n:::\n:::\n\n\nOf course you can also add a label to your clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, #|\n    layout = \"manual\",\n    x = bb$xy[, 1],\n    y = bb$xy[, 2]\n) +\n    geom_edge_link0(aes(col = col), width = 0.2) +\n    geom_node_point(aes(fill = grp), shape = 21, size = 3) +\n    geom_mark_hull(\n        aes(x, y, group = grp, fill = grp, label = grp),\n        concavity = 4,\n        expand = unit(2, \"mm\"),\n        alpha = 0.25\n    ) +\n    scale_color_brewer(palette = \"Set1\") +\n    scale_fill_brewer(palette = \"Set1\") +\n    scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3), rgb(0, 0, 0, 1))) +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/network-grps-label-sol-1.png){width=672}\n:::\n:::\n\n\nIf you want to avoid node overlaps, you can use `geom_node_voronoi()`.\nSo this is actually already implemented in {{ggraph}}, but originates from `geom_voronoi_tile()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g,\n    layout = \"manual\",\n    x = bb$xy[, 1],\n    y = bb$xy[, 2]\n) +\n    geom_edge_link0(aes(filter = !col, col = col), width = 0.2) +\n    geom_node_voronoi(\n        aes(x, y, fill = grp),\n        max.radius = 0.4,\n        expand = unit(-0.5, \"mm\"),\n        colour = \"black\"\n    ) +\n    scale_color_brewer(palette = \"Set1\") +\n    scale_fill_brewer(palette = \"Set1\") +\n    scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3), rgb(0, 0, 0, 1))) +\n    theme(\n        legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank()\n    ) +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/network-voronoi-1.png){width=672}\n:::\n:::\n\n\n\n## FAQ \n\n> \"How can I achieve that my directed edges stop at the node border, independent from the node size?\" \n\nThis one has given me headaches for the longest time. No matter what I tried, I always ended up with\nsomething like the below plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## create a random network\nset.seed(1071)\ng <- sample_pa(30, 1)\nV(g)$degree <- degree(g, mode = \"in\")\n\nggraph(g, \"stress\") +\n    geom_edge_link(\n        aes(end_cap = circle(node2.degree + 2, \"pt\")),\n        edge_colour = \"black\",\n        arrow = arrow(\n            angle = 10,\n            length = unit(0.15, \"inches\"),\n            ends = \"last\",\n            type = \"closed\"\n        )\n    ) +\n    geom_node_point(aes(size = degree), col = \"grey66\", show.legend = FALSE) +\n    scale_size(range = c(3, 11)) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/arrow-size-1.png){width=672}\n:::\n:::\n\n\nThe overlap can be avoided by using the `I()` function from base R, which\ntreats the entries of a vector \"as is\". So we know that if a node has degree 5, it will be mapped to\na circle with radius (or diameter?) \"5pt\". Since this means, that you have no control over the scaling,\nyou need to do that beforehand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## this function is borrowed from the ambient package\nnormalise <- function(x, from = range(x), to = c(0, 1)) {\n    x <- (x - from[1]) / (from[2] - from[1])\n    if (!identical(to, c(0, 1))) {\n        x <- x * (to[2] - to[1]) + to[1]\n    }\n    x\n}\n\n## map to the range you want\nV(g)$degree <- normalise(V(g)$degree, to = c(3, 11))\n\nggraph(g, \"stress\") +\n    geom_edge_link(\n        aes(end_cap = circle(node2.degree + 2, \"pt\")),\n        edge_colour = \"grey25\",\n        arrow = arrow(\n            angle = 10,\n            length = unit(0.15, \"inches\"),\n            ends = \"last\",\n            type = \"closed\"\n        )\n    ) +\n    geom_node_point(aes(size = I(degree)), col = \"grey66\") +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/arrows-size-sol-1.png){width=672}\n:::\n:::\n\n\nI would not be surprised though if there is an even easier fix for this problem.\n\n> \"How can I lower the opacity of nodes without making edges visible underneath?\"\n\nOne of the rules I try to follow is that edges should not be visible on top of nodes.\nUsually that is easy to achieve by drawing the edges before the nodes. But if you \nwant to lower the opacity of nodes, they do become visible again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- sample_gnp(20, 0.5)\nV(g)$degree <- degree(g)\n\nggraph(g, \"stress\") +\n    geom_edge_link(edge_colour = \"grey66\") +\n    geom_node_point(\n        size = 8,\n        aes(alpha = degree),\n        col = \"red\",\n        show.legend = FALSE\n    ) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/alpha-nodes-1.png){width=672}\n:::\n:::\n\n\nThe solution is rather simple. Just add a node layer with the same aesthetics below with\n`alpha=1` (default) and `color=\"white\"` (or the background color of the plot).\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, \"stress\") +\n    geom_edge_link(edge_colour = \"grey66\") +\n    geom_node_point(size = 8, col = \"white\") +\n    geom_node_point(\n        aes(alpha = degree),\n        size = 8,\n        col = \"red\",\n        show.legend = FALSE\n    ) +\n    theme_graph()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/alpha-nodes-sol-1.png){width=672}\n:::\n:::\n\n\nOf course you could also use `start_cap` and `end_cap` here, but you may have to fiddle again as in the last example. \n\n> \"How can I enhance readability of node labels in hairball graphs?\"\n\nSometimes it is really hard to make labels readable when the network is very cluttered\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- sample_gnp(50, 0.7)\nV(g)$name <- sapply(1:50, function(x) paste0(sample(LETTERS, 4), collapse = \"\"))\nE(g)$weight <- runif(ecount(g))\n\nggraph(g) +\n    geom_edge_link0(aes(edge_color = weight, edge_linewidth = weight), show.legend = FALSE) +\n    geom_node_point(size = 8, color = \"#44a6c6\") +\n    geom_node_text(aes(label = name), fontface = \"bold\") +\n    scale_edge_color_continuous(low = \"grey66\", high = \"black\") +\n    scale_edge_width(range = c(0.1, 0.5)) +\n    theme_graph() +\n    coord_fixed()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing \"stress\" as default layout\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/unreadable-labels-1.png){width=768}\n:::\n:::\n\n\nHere you can make use of the fact that the layout of the nodes are stored in a \"hidden\" data frame when a `ggraph` object is constructed. That means you can use other geoms from other packages. In this case, the `shadowtext` package as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, \"stress\") +\n    geom_edge_link0(aes(edge_color = weight, edge_linewidth = weight), show.legend = FALSE) +\n    geom_node_point(size = 8, color = \"#44a6c6\") +\n    shadowtext::geom_shadowtext(aes(x, y, label = name), color = \"black\", size = 4, bg.colour = \"white\") +\n    scale_edge_color_continuous(low = \"grey66\", high = \"black\") +\n    scale_edge_width(range = c(0.1, 0.5)) +\n    theme_graph() +\n    coord_fixed()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/shadowtext-labels-1.png){width=768}\n:::\n:::\n\n\n\n## snahelper\n\nEven with a lot of experience, it may still be a painful process to produce nice looking\nfigures by writing `ggraph` code. Enter the `snahelper`. \n\n```r\ninstall.packages(\"snahelper\")\n```\n\nThe `snahelper` is an RStudio addin which provides\nyou with a GUI to plot networks. Instead of writing code, you simply use drop-down menus to assign \nattributes to aesthetics or change appearances globally. One great feature of the addin is that you \ncan adjust the position of nodes individually if you are not satisfied with their location.\nOnce you are done, you can either directly export the figure to png or automatically insert the code to produce the figure into your script. That way, you can review the code and hopefully learn something from it. Below if a demo that shows its functionality.\n\n![](https://raw.githubusercontent.com/schochastics/snahelper/master/man/figures/snahelper.gif)\n\n\nTo use the addin, simply highlight the variable name of your network within an R script and\nchoose the SNAhelper from the Addins drop-down menu within RStudio. You can find more about the \nAddin on its dedicated [pkgdown page](http://snahelper.schochastics.net)\n\n## Advanced layouts\n\nWhile “stress” is the key layout algorithm in `graphlayouts`, there are other, more specialized layouts that can be used for different purposes. In this part, we work through some examples with concentric layouts and learn how to disentangle extreme\n\"hairball\" networks.\n\n### Concentric layouts\n\nCircular layouts are generally not advisable. Concentric circles, on the other hand, help to emphasize \nthe position of certain nodes in the network. The `graphlayouts` package has two function to create \nconcentric layouts, `layout_with_focus()` and `layout_with_centrality()`.\n\nThe first one allows to focus the network on a specific node and arrange all other nodes in concentric circles (depending on the geodesic distance) around it. Below we focus on the character *Ned Stark*.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(gotS1, layout = \"focus\", focus = 1) +\n    geom_edge_link0(aes(edge_linewidth = weight), edge_colour = \"grey66\") +\n    geom_node_point(aes(fill = clu, size = size), shape = 21) +\n    geom_node_text(aes(filter = (name == \"Ned\"), size = size, label = name),\n        family = \"serif\"\n    ) +\n    scale_edge_width_continuous(range = c(0.2, 1.2)) +\n    scale_size_continuous(range = c(1, 5)) +\n    scale_fill_manual(values = got_palette) +\n    coord_fixed() +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/concentric-ned-1.png){width=768}\n:::\n:::\n\n\nThe parameter `focus` in the first line is used to choose the node id of the focal node. \nThe function `coord_fixed()` is used to always keep the aspect ratio at one (i.e. the circles are always displayed as a circle and not an ellipse). \n\nThe function `draw_circle()` can be used to add the circles explicitly.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(gotS1, layout = \"focus\", focus = 1) +\n    draw_circle(col = \"#00BFFF\", use = \"focus\", max.circle = 3) +\n    geom_edge_link0(aes(width = weight), edge_colour = \"grey66\") +\n    geom_node_point(aes(fill = clu, size = size), shape = 21) +\n    geom_node_text(aes(filter = (name == \"Ned\"), size = size, label = name),\n        family = \"serif\"\n    ) +\n    scale_edge_width_continuous(range = c(0.2, 1.2)) +\n    scale_size_continuous(range = c(1, 5)) +\n    scale_fill_manual(values = got_palette) +\n    coord_fixed() +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/concentric-ned1-1.png){width=768}\n:::\n:::\n\n\n`layout_with_centrality()` works in a similar way. You can specify any centrality index (or any numeric vector for that matter), and create a concentric layout where the most central nodes are put in the center and the most peripheral nodes in the biggest circle. The numeric attribute used for the layout is specified with the `cent` parameter. Here, we use the weighted degree\nof the characters.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(gotS1, layout = \"centrality\", cent = graph.strength(gotS1)) +\n    geom_edge_link0(aes(edge_linewidth = weight), edge_colour = \"grey66\") +\n    geom_node_point(aes(fill = clu, size = size), shape = 21) +\n    geom_node_text(aes(size = size, label = name), family = \"serif\") +\n    scale_edge_width_continuous(range = c(0.2, 0.9)) +\n    scale_size_continuous(range = c(1, 8)) +\n    scale_fill_manual(values = got_palette) +\n    coord_fixed() +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/concentric-weighted-deg-1.png){width=768}\n:::\n:::\n\n\n(*Concentric layouts are not only helpful to focus on specific nodes, but also make for a \ngood tool to visualize ego networks.*)\n\n### Backbone layout\n\n`layout_as_backbone()` is a layout algorithm that can help emphasize hidden group structures.\nTo illustrate the performance of the algorithm, we create an artificial network with a subtle group structure using `sample_islands()` from `igraph`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- sample_islands(9, 40, 0.4, 15)\ng <- simplify(g)\nV(g)$grp <- as.character(rep(1:9, each = 40))\n```\n:::\n\n\nThe network consists of 9 groups with 40 vertices each. The density within each group is\n0.4 and there are 15 edges running between each pair of groups. Let us try to\nvisualize the network with what we have learned so far.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, layout = \"stress\") +\n    geom_edge_link0(edge_colour = \"black\", edge_linewidth = 0.1, edge_alpha = 0.5) +\n    geom_node_point(aes(fill = grp), shape = 21) +\n    scale_fill_brewer(palette = \"Set1\") +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/island_stress-1.png){width=768}\n:::\n:::\n\n\nAs you can see, the graph seems to be a proper \"hairball\" without any special \nstructural features standing out. In this case, though, we know that there should be\n9 groups of vertices that are internally more densely connected than externally.\nTo uncover this group structure, we turn to the \"backbone layout\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb <- layout_as_backbone(g, keep = 0.4)\nE(g)$col <- FALSE\nE(g)$col[bb$backbone] <- TRUE\n```\n:::\n\n\nThe idea of the algorithm is as follows. For each edge, an embededness score is calculated which serves as an\nedge weight attribute. These weights are then ordered and only the edges with the highest score are kept. The number of\nedges to keep is controlled with the `keep` parameter. In our example, we keep the top 40%. The parameter usually requires some experimenting to find out what works best. Since this\nmay result in an unconnected network, we add all edges of the union of all [maximum spanning trees](https://en.wikipedia.org/wiki/Spanning_tree). The resulting network is the \"backbone\" of the original \nnetwork and the \"stress\" layout algorithm is applied to this network. Once the layout is calculated, all edges are added back to the network. \n\nThe output of the function are the x and y coordinates for nodes and a vector that gives the ids of the\nedges in the backbone network. In the code above, we use this vector to create a binary edge attribute that indicates if an edge is part of the backbone or not.\n\nTo use the coordinates, we set the `layout` parameter to \"manual\" and provide the x and y coordinates\nas parameters.\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, layout = \"manual\", x = bb$xy[, 1], y = bb$xy[, 2]) +\n    geom_edge_link0(aes(edge_colour = col), edge_linewidth = 0.1) +\n    geom_node_point(aes(fill = grp), shape = 21) +\n    scale_fill_brewer(palette = \"Set1\") +\n    scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3), rgb(0, 0, 0, 1))) +\n    theme_graph() +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/backbone-plot-1.png){width=768}\n:::\n:::\n\n\nThe groups are now clearly visible! Of course the network used in the example is specifically tailored to illustrate the power of the algorithm. Using the backbone layout in real world networks may not always result in such a clear division of groups.\nIt should thus not be seen as a universal remedy for drawing hairball networks. Keep in mind: It can **only** emphasize a hidden group structure **if it exists**.\n\nThe plot below shows an empirical example where the algorithm was able to uncover a hidden group structure. The network shows facebook friendships of a university in the US. Node colour corresponds to dormitory of students.\nLeft is the ordinary stress layout and right the backbone layout.\n\n![](assets/img/facebook.png)\n\n### Dynamic networks\n\nPeople regularly ask me if it is possible to animate a network evolution with `ggraph` and `gganimate`.\nUnfortunately this is not yet possible. But fear not! There is a way to still get it done with some \nhacking around the ggraph package. I will walk through this hack below but hope that it will eventually become obsolete.\n\nFor this part of the tutorial, you will need two additional packages.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\nWe will be using the *50 actor excerpt from the Teenage Friends and Lifestyle Study* from the [RSiena data repository](https://www.stats.ox.ac.uk/~snijders/siena/siena_datasets.htm) as an example. The data is part of the \n`networkdata` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"s50\")\n```\n:::\n\n\nThe dataset consists of three networks with 50 actors each and a vertex attribute for the smoking behaviour of students.\nAs a first step, we need to create a layout for all three networks. You can basically use any type of layout for each network, but I'd recommend `layout_as_dynamic()` from my very own package {{graphlayouts}}. The algorithm calculates a reference layout\nwhich is a layout of the union of all networks and individual layouts based on stress minimization and combines those in a linear combination which is controlled by the `alpha` parameter. For `alpha=1`, only the reference layout is used and all graphs have the same layout. For `alpha=0`, the stress layout of each individual graph is used. Values in-between interpolate between the two layouts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- layout_as_dynamic(s50, alpha = 0.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\n```\n\n\n:::\n:::\n\n\nNow you could use {{ggraph}} and {{patchwork}} to produce a static plot with all networks side-by-side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npList <- vector(\"list\", length(s50))\n\nfor (i in 1:length(s50)) {\n    pList[[i]] <- ggraph(s50[[i]], layout = \"manual\", x = xy[[i]][, 1], y = xy[[i]][, 2]) +\n        geom_edge_link0(edge_linewidth = 0.6, edge_colour = \"grey66\") +\n        geom_node_point(shape = 21, aes(fill = as.factor(smoke)), size = 6) +\n        geom_node_text(label = 1:50, repel = FALSE, color = \"white\", size = 4) +\n        scale_fill_manual(\n            values = c(\"forestgreen\", \"grey25\", \"firebrick\"),\n            guide = ifelse(i != 2, \"none\", \"legend\"),\n            name = \"smoking\",\n            labels = c(\"never\", \"occasionally\", \"regularly\")\n        ) +\n        theme_graph() +\n        theme(legend.position = \"bottom\") +\n        labs(title = paste0(\"Wave \", i))\n}\n\nwrap_plots(pList)\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/static_plot-1.png){width=1344}\n:::\n:::\n\n\nThis is nice but of course we want to animate the changes. This is where we \nsay goodbye to `ggraph` and hello to good-old `ggplot2`. First, we create a list of data frames\nfor all nodes and add the layout to it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_lst <- lapply(1:length(s50), function(i) {\n    cbind(igraph::as_data_frame(s50[[i]], \"vertices\"),\n        x = xy[[i]][, 1], y = xy[[i]][, 2], frame = i\n    )\n})\n```\n:::\n\n\nThis was the easy part, because all nodes are present in all time frames so there is not much to do.\nEdges will be a lot trickier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_lst <- lapply(1:length(s50), function(i) {\n    cbind(igraph::as_data_frame(s50[[i]], \"edges\"), frame = i)\n})\n\nedges_lst <- lapply(1:length(s50), function(i) {\n    edges_lst[[i]]$x <- nodes_lst[[i]]$x[match(edges_lst[[i]]$from, nodes_lst[[i]]$name)]\n    edges_lst[[i]]$y <- nodes_lst[[i]]$y[match(edges_lst[[i]]$from, nodes_lst[[i]]$name)]\n    edges_lst[[i]]$xend <- nodes_lst[[i]]$x[match(edges_lst[[i]]$to, nodes_lst[[i]]$name)]\n    edges_lst[[i]]$yend <- nodes_lst[[i]]$y[match(edges_lst[[i]]$to, nodes_lst[[i]]$name)]\n    edges_lst[[i]]$id <- paste0(edges_lst[[i]]$from, \"-\", edges_lst[[i]]$to)\n    edges_lst[[i]]$status <- TRUE\n    edges_lst[[i]]\n})\n\nhead(edges_lst[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  from  to frame        x        y     xend      yend     id status\n1   V1 V11     1  1.89891  0.39497  2.18308 -0.607441 V1-V11   TRUE\n2   V1 V14     1  1.89891  0.39497  2.48248  0.349492 V1-V14   TRUE\n3   V2  V7     1  3.66686 -1.22147  3.89081 -1.863693  V2-V7   TRUE\n4   V2 V11     1  3.66686 -1.22147  2.18308 -0.607441 V2-V11   TRUE\n5   V3  V4     1 -4.88505 -2.32031 -3.86935 -2.516477  V3-V4   TRUE\n6   V3  V9     1 -4.88505 -2.32031 -5.44869 -2.992036  V3-V9   TRUE\n```\n\n\n:::\n:::\n\n\nWe have expanded the edge data frame in a way that also includes the coordinates of the endpoints from \nthe layout that we calculated earlier. \n\nNow we create a helper matrix which includes all edges that are present in any of the networks\n\n::: {.cell}\n\n```{.r .cell-code}\nall_edges <- do.call(\"rbind\", lapply(s50, get.edgelist))\nall_edges <- all_edges[!duplicated(all_edges), ]\nall_edges <- cbind(all_edges, paste0(all_edges[, 1], \"-\", all_edges[, 2]))\n```\n:::\n\n\nThis is used to impute the edges into all networks. So any edge that is not present in time frame two and three gets added to\ntime frame one. But to keep track of these, we set there status to `FALSE`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_lst <- lapply(1:length(s50), function(i) {\n    idx <- which(!all_edges[, 3] %in% edges_lst[[i]]$id)\n    if (length(idx != 0)) {\n        tmp <- data.frame(from = all_edges[idx, 1], to = all_edges[idx, 2], id = all_edges[idx, 3])\n        tmp$x <- nodes_lst[[i]]$x[match(tmp$from, nodes_lst[[i]]$name)]\n        tmp$y <- nodes_lst[[i]]$y[match(tmp$from, nodes_lst[[i]]$name)]\n        tmp$xend <- nodes_lst[[i]]$x[match(tmp$to, nodes_lst[[i]]$name)]\n        tmp$yend <- nodes_lst[[i]]$y[match(tmp$to, nodes_lst[[i]]$name)]\n        tmp$frame <- i\n        tmp$status <- FALSE\n        edges_lst[[i]] <- rbind(edges_lst[[i]], tmp)\n    }\n    edges_lst[[i]]\n})\n```\n:::\n\n\nWhy are we doing this? After a lot of experimenting, I came to the conclusion that\nit is always best to draw all edges, but use zero opacity if `status = FALSE`. In that way, one gets a\nsmoother transition for edges that (dis)appear. There are probably other workarounds though.\n\nIn the last step, we create a data frame out of the lists. \n\n::: {.cell}\n\n```{.r .cell-code}\nedges_df <- do.call(\"rbind\", edges_lst)\nnodes_df <- do.call(\"rbind\", nodes_lst)\n\nhead(edges_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  from  to frame        x        y     xend      yend     id status\n1   V1 V11     1  1.89891  0.39497  2.18308 -0.607441 V1-V11   TRUE\n2   V1 V14     1  1.89891  0.39497  2.48248  0.349492 V1-V14   TRUE\n3   V2  V7     1  3.66686 -1.22147  3.89081 -1.863693  V2-V7   TRUE\n4   V2 V11     1  3.66686 -1.22147  2.18308 -0.607441 V2-V11   TRUE\n5   V3  V4     1 -4.88505 -2.32031 -3.86935 -2.516477  V3-V4   TRUE\n6   V3  V9     1 -4.88505 -2.32031 -5.44869 -2.992036  V3-V9   TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(nodes_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name smoke        x        y frame\nV1   V1     2  1.89891  0.39497     1\nV2   V2     3  3.66686 -1.22147     1\nV3   V3     1 -4.88505 -2.32031     1\nV4   V4     1 -3.86935 -2.51648     1\nV5   V5     1 -2.85662 -3.04834     1\nV6   V6     1 -1.62910 -5.01750     1\n```\n\n\n:::\n:::\n\n\nAnd that's it in terms of data wrangling. All that is left is to plot/animate the data.\n```r\nggplot() +\n  geom_segment(\n    data = edges_df,\n    aes(x = x, xend = xend, y = y, yend = yend, group = id, alpha = status),\n    show.legend = FALSE\n  ) +\n  geom_point(\n    data = nodes_df, aes(x, y, group = name, fill = as.factor(smoke)),\n    shape = 21, size = 4, show.legend = FALSE\n  ) +\n  scale_fill_manual(values = c(\"forestgreen\", \"grey25\", \"firebrick\")) +\n  scale_alpha_manual(values = c(0, 1)) +\n  ease_aes(\"quadratic-in-out\") +\n  transition_states(frame, state_length = 0.5, wrap = FALSE) +\n  labs(title = \"Wave {closest_state}\") +\n  theme_void()\n```\n\n![](assets/img/s50.gif)\n\n### Multilevel networks\n\nIn this section, you will get to know  `layout_as_multilevel()`, a layout algorithm in the `raphlayouts` package which\ncan be use to visualize multilevel networks. \n\nA multilevel network consists of two (or more) levels \nwith different node sets and intra-level ties. For instance, one level could be scientists and their collaborative ties and the\nsecond level are labs and ties among them, and inter-level edges are the affiliations of scientists and labs. \n\nThe `graphlayouts` package contains an artificial multilevel network which will be used to illustrate the algorithm.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"multilvl_ex\")\n```\n:::\n\n\nThe package assumes that a multilevel network has a vertex attribute called `lvl` which\nholds the level information (1 or 2). \n\nThe underlying algorithm of `layout_as_multilevel()` has three different versions, \nwhich can be used to emphasize different structural features of a multilevel network.\n\nIndependent of which option is chosen, the algorithm internally produces a 3D layout, where\neach level is positioned on a different y-plane. The 3D layout is then mapped to 2D with an [isometric projection](https://en.wikipedia.org/wiki/Isometric_projection).\nThe parameters `alpha` and `beta` control the perspective of the projection.\nThe default values seem to work for many instances, but may not always be optimal. \nAs a rough guideline: `beta` rotates the plot around the y axis (in 3D) and `alpha` moves the POV up or down.\n\n#### Complete layout\n\nA layout for the complete network can be computed via `layout_as_multilevel()` setting `type = \"all\"`.\nInternally, the algorithm produces a constrained 3D stress layout (each level on a different y plane) which is then \nprojected to 2D. This layout ignores potential differences in each level and optimizes only the overall layout.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- layout_as_multilevel(multilvl_ex, type = \"all\", alpha = 25, beta = 45)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis graph was created by an old(er) igraph version.\n  Call upgrade_graph() on it to use with the current igraph version\n  For now we convert it on the fly...\n```\n\n\n:::\n:::\n\n\nTo visualize the network with `ggraph`, you may want to draw the edges for each level (and inter level edges)\nwith a different edge geom. This gives you more flexibility to control aesthetics and can easily be achieved\nwith a filter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(multilvl_ex, \"manual\", x = xy[, 1], y = xy[, 2]) +\n    geom_edge_link0(\n        aes(filter = (node1.lvl == 1 & node2.lvl == 1)),\n        edge_colour = \"firebrick3\",\n        alpha = 0.5,\n        edge_linewidth = 0.3\n    ) +\n    geom_edge_link0(\n        aes(filter = (node1.lvl != node2.lvl)),\n        alpha = 0.3,\n        edge_linewidth = 0.1,\n        edge_colour = \"black\"\n    ) +\n    geom_edge_link0(\n        aes(filter = (node1.lvl == 2 &\n            node2.lvl == 2)),\n        edge_colour = \"goldenrod3\",\n        edge_linewidth = 0.3,\n        alpha = 0.5\n    ) +\n    geom_node_point(aes(shape = as.factor(lvl)), fill = \"grey25\", size = 3) +\n    scale_shape_manual(values = c(21, 22)) +\n    theme_graph() +\n    coord_cartesian(clip = \"off\", expand = TRUE) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/multi-all-example-1.png){width=672}\n:::\n:::\n\n\n#### Separate layouts for both levels\n\nIn many instances, there may be different structural properties inherent to the levels of \nthe network. In that case, two layout functions can be passed to `layout_as_multilevel()` to deal \nwith these differences. In our artificial network, level 1 has a hidden group structure and level 2\nhas a core-periphery structure.\n\nTo use this layout option, set `type = \"separate\"` and specify two layout functions with `FUN1` and `FUN2`.\nYou can change internal parameters of these layout functions with named lists in the `params1` and `params2`\nargument. Note that this version optimizes inter-level edges only minimally. The emphasis is on the \nintra-level structures.\n\n\n::: {.cell lbel='separate-layout'}\n\n```{.r .cell-code}\nxy <- layout_as_multilevel(multilvl_ex,\n    type = \"separate\",\n    FUN1 = layout_as_backbone,\n    FUN2 = layout_with_stress,\n    alpha = 25, beta = 45\n)\n```\n:::\n\n\nAgain, try to include an edge geom for each level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols2 <- c(\n    \"#3A5FCD\", \"#CD00CD\", \"#EE30A7\", \"#EE6363\",\n    \"#CD2626\", \"#458B00\", \"#EEB422\", \"#EE7600\"\n)\n\nggraph(multilvl_ex, \"manual\", x = xy[, 1], y = xy[, 2]) +\n    geom_edge_link0(\n        aes(\n            filter = (node1.lvl == 1 & node2.lvl == 1),\n            edge_colour = col\n        ),\n        alpha = 0.5, edge_linewidth = 0.3\n    ) +\n    geom_edge_link0(\n        aes(filter = (node1.lvl != node2.lvl)),\n        alpha = 0.3,\n        edge_linewidth = 0.1,\n        edge_colour = \"black\"\n    ) +\n    geom_edge_link0(\n        aes(\n            filter = (node1.lvl == 2 & node2.lvl == 2),\n            edge_colour = col\n        ),\n        edge_linewidth = 0.3, alpha = 0.5\n    ) +\n    geom_node_point(aes(\n        fill = as.factor(grp),\n        shape = as.factor(lvl),\n        size = nsize\n    )) +\n    scale_shape_manual(values = c(21, 22)) +\n    scale_size_continuous(range = c(1.5, 4.5)) +\n    scale_fill_manual(values = cols2) +\n    scale_edge_color_manual(values = cols2, na.value = \"grey12\") +\n    scale_edge_alpha_manual(values = c(0.1, 0.7)) +\n    theme_graph() +\n    coord_cartesian(clip = \"off\", expand = TRUE) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/multi-separate-example-1.png){width=672}\n:::\n:::\n\n\n#### Fix only one level\n\nThis layout can be used to emphasize one intra-level structure. The layout \nof the second level is calculated in a way that optimizes inter-level edge placement. \nSet `type = \"fix1\"` and specify  `FUN1` and possibly `params1` to fix level 1 or set `type = \"fix2\"` and specify \n`FUN2` and possibly `params2` to fix level 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- layout_as_multilevel(multilvl_ex,\n    type = \"fix2\",\n    FUN2 = layout_with_stress,\n    alpha = 25, beta = 45\n)\n\nggraph(multilvl_ex, \"manual\", x = xy[, 1], y = xy[, 2]) +\n    geom_edge_link0(\n        aes(\n            filter = (node1.lvl == 1 & node2.lvl == 1),\n            edge_colour = col\n        ),\n        alpha = 0.5, edge_linewidth = 0.3\n    ) +\n    geom_edge_link0(\n        aes(filter = (node1.lvl != node2.lvl)),\n        alpha = 0.3,\n        edge_linewidth = 0.1,\n        edge_colour = \"black\"\n    ) +\n    geom_edge_link0(\n        aes(\n            filter = (node1.lvl == 2 & node2.lvl == 2),\n            edge_colour = col\n        ),\n        edge_linewidth = 0.3, alpha = 0.5\n    ) +\n    geom_node_point(aes(\n        fill = as.factor(grp),\n        shape = as.factor(lvl),\n        size = nsize\n    )) +\n    scale_shape_manual(values = c(21, 22)) +\n    scale_size_continuous(range = c(1.5, 4.5)) +\n    scale_fill_manual(values = cols2) +\n    scale_edge_color_manual(values = cols2, na.value = \"grey12\") +\n    scale_edge_alpha_manual(values = c(0.1, 0.7)) +\n    theme_graph() +\n    coord_cartesian(clip = \"off\", expand = TRUE) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/multi-fix2-example-1.png){width=672}\n:::\n:::\n\n\n#### 3D with threejs\n\nInstead of the default 2D projection, `layout_as_multilevel()` can also return the 3D layout \nby setting `project2d = FALSE`. The 3D layout can then be used with e.g. `threejs` to produce an interactive\n3D visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(threejs)\nxyz <- layout_as_multilevel(multilvl_ex,\n    type = \"separate\",\n    FUN1 = layout_as_backbone,\n    FUN2 = layout_with_stress,\n    project2D = FALSE\n)\nmultilvl_ex$layout <- xyz\nV(multilvl_ex)$color <- c(\"#00BFFF\", \"#FF69B4\")[V(multilvl_ex)$lvl]\nV(multilvl_ex)$vertex.label <- V(multilvl_ex)$name\n\ngraphjs(multilvl_ex, bg = \"black\", vertex.shape = \"sphere\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"scatterplotThree html-widget html-fill-item\" id=\"ZFNFlrzXe2\" style=\"width:100%;height:650px;\"></div>\n<script type=\"application/json\" data-for=\"ZFNFlrzXe2\">{\"x\":{\"NROW\":170,\"height\":null,\"width\":null,\"axis\":false,\"numticks\":[6,6,6],\"xticklabs\":null,\"yticklabs\":null,\"zticklabs\":null,\"colorsize\":2,\"stroke\":\"black\",\"flipy\":true,\"grid\":false,\"renderer\":\"auto\",\"signif\":8,\"bg\":\"black\",\"cexsymbols\":1,\"xlim\":[-1,1],\"ylim\":[-1,1],\"zlim\":[-1,1],\"axisscale\":[1,1,1],\"pch\":[\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\"],\"elementId\":\"ZFNFlrzXe2\",\"from\":[[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,17,17,17,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,35,35,35,36,36,36,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,50,50,50,50,50,50,51,51,51,51,51,51,51,51,52,52,52,53,53,53,53,54,54,54,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,64,64,64,64,64,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,68,68,68,68,69,69,69,69,70,70,70,70,70,71,71,71,71,72,72,72,73,74,74,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,82,82,82,82,82,82,83,83,83,83,83,83,83,84,84,84,84,84,84,84,85,85,85,85,85,85,86,86,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,88,88,88,89,89,89,89,90,90,90,91,91,91,91,92,93,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,105,105,105,106,106,106,106,106,106,107,107,108,108,108,108,108,109,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,138,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,135,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,130,54,55,121,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,130,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,161,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,151]],\"to\":[[3,5,6,7,10,11,162,37,48,106,2,4,5,6,7,9,11,12,13,14,15,18,162,109,4,6,9,10,12,15,16,86,4,5,6,7,9,11,14,16,18,46,80,6,7,9,15,17,22,47,57,79,91,8,10,11,12,15,16,17,18,31,65,71,96,8,10,11,12,13,14,15,17,18,8,9,10,11,13,14,15,17,58,9,10,13,14,16,18,162,68,69,16,18,40,12,13,15,16,17,18,110,12,13,14,15,17,18,26,44,53,75,77,79,95,110,168,13,14,15,16,17,162,51,167,15,16,17,18,86,15,17,18,162,29,33,39,44,58,69,70,76,18,162,36,163,43,105,17,18,162,21,72,18,23,98,162,110,22,23,24,25,26,29,30,31,33,35,36,42,75,21,23,24,25,27,31,32,33,34,35,36,48,104,22,23,25,26,27,28,33,34,35,36,37,85,110,23,24,31,33,37,163,44,164,87,24,25,26,27,29,30,31,33,34,35,37,163,110,25,26,29,31,33,34,35,36,37,90,95,26,27,28,33,36,37,27,28,29,31,32,34,35,36,37,67,28,29,30,33,35,163,42,29,30,31,32,34,36,163,62,64,102,32,35,36,37,163,95,33,34,35,37,163,49,64,35,36,37,163,83,100,106,33,34,35,36,111,34,36,163,55,59,61,70,35,36,163,51,72,36,37,163,40,64,78,86,108,163,164,80,163,89,167,40,41,42,43,44,46,48,49,50,51,53,164,165,105,41,44,45,48,49,50,52,54,55,57,43,44,49,51,53,164,55,70,71,101,45,46,48,49,51,52,164,54,55,82,90,43,44,46,47,48,49,50,51,52,53,55,63,71,81,98,101,168,44,45,46,49,50,51,164,54,55,165,56,45,46,47,48,49,50,52,164,54,55,76,109,47,49,50,51,54,61,168,49,50,51,53,54,55,73,51,164,54,165,49,51,52,54,55,165,80,51,53,54,55,165,62,52,53,164,54,165,86,52,53,54,55,165,66,77,109,53,54,165,54,55,165,106,55,165,89,165,84,85,168,58,59,60,61,64,65,69,70,73,74,84,88,89,58,61,64,65,68,69,71,73,74,76,97,61,65,66,69,70,72,74,62,64,67,68,69,70,74,85,106,61,63,64,66,68,73,74,166,80,85,62,63,68,69,70,71,74,64,67,69,70,71,72,73,74,166,82,100,106,64,67,68,71,73,74,166,111,67,69,70,71,74,67,70,71,72,73,166,67,69,72,73,74,166,168,71,166,72,73,74,100,70,71,73,74,73,74,166,92,109,73,166,97,105,73,74,166,166,166,80,76,82,85,86,91,92,93,167,79,81,82,83,84,90,91,93,167,78,81,82,83,84,85,86,87,88,89,91,92,93,167,96,98,80,81,82,86,87,90,91,93,81,82,83,84,85,88,89,91,92,93,167,82,83,84,85,87,90,91,93,167,83,84,87,90,91,92,93,86,87,88,90,92,104,85,86,88,89,91,92,93,85,87,90,91,92,93,167,87,88,92,93,167,107,87,88,89,91,92,93,105,89,90,91,92,93,109,110,89,90,91,92,93,167,90,91,93,167,92,167,104,92,93,167,103,167,167,95,99,100,101,103,106,107,109,96,97,98,99,100,103,104,106,107,108,109,112,97,98,99,101,103,105,109,111,112,168,99,100,101,102,105,106,107,108,111,112,168,100,101,106,109,110,111,112,168,104,105,106,107,108,111,101,102,103,104,105,107,108,109,110,111,112,168,103,105,106,109,110,111,112,105,106,108,109,111,105,106,107,108,110,111,168,107,108,110,111,109,110,168,107,108,110,111,112,168,111,168,109,110,111,112,168,111,168,168,168,168,125,125,125,125,125,125,125,125,125,125,125,125,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,157,150,153,154,114,154,147,115,130,155,122,160,143,169,126,136,113,149,119,162,129,147,169,127,138,116,124,118,114,131,158,145,114,142,147,159,135,118,122,163,161,155,121,146,159,158,120,116,154,113,169,157,135,144,138,114,164,156,133,165,147,136,132,138,131,148,134,153,153,126,125,139,149,143,156,169,147,161,130,166,124,169,151,132,140,121,136,126,132,122,121,149,145,132,124,158,151,140,148,167,139,143,145,131,113,130,154,113,115,124,154,144,119,130,140,134,135,161,122,168]],\"lwd\":1,\"linealpha\":0.3,\"center\":true,\"main\":[\"\"],\"options\":true,\"alpha\":[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],\"vertices\":[[-0.25273285,0.69167842,1,-0.087522766,0.53215019,1,-0.13431563,0.052867034,1,-0.24069825,0.55096867,1,-0.10494005,0.11537639,1,-0.22627654,0.27656216,1,-0.11552745,0.22237235,1,-0.034370808,0.058336494,1,-0.21855117,0.47160846,1,-0.035284957,-0.076145595,1,-0.13139898,0.36555781,1,-0.19090862,0.21102941,1,-0.13901771,-0.10724149,1,-0.17703033,0.30400449,1,-0.046106673,0.17563664,1,-0.074089738,0.3637549,1,-0.15831259,-0.26115643,1,-0.1823226,0.47111791,1,-0.21827302,0.37974999,1,0.57503759,0.70109652,1,0.59525712,0.56408609,1,0.63341331,0.49089741,1,0.52342015,0.92439148,1,0.5674487499999999,0.61835826,1,0.65334371,0.59163278,1,0.69632196,0.48116129,1,0.69142565,0.67296431,1,0.50729108,0.75372311,1,0.58494345,0.87496313,1,0.80122692,0.63419904,1,0.81487351,0.52335779,1,0.63434192,0.68138926,1,0.73850195,1,1,0.49081027,0.5170342999999999,1,0.70086203,0.8776085,1,0.7104978199999999,0.59530844,1,0.63631643,0.75846723,1,0.54726898,0.77041942,1,-0.73266792,0.27139311,1,-0.77454098,0.50148468,1,-0.6956890100000001,0.47172781,1,-0.90001348,0.47781993,1,-0.64838818,0.28927805,1,-0.84466117,0.26531147,1,-0.73953549,0.35775947,1,-0.95024608,0.44006873,1,-0.76936849,0.31149672,1,-1,0.24971024,1,-0.8732915,0.575215,1,-0.83900367,0.35553727,1,-0.83501761,0.2078617,1,-0.88943394,0.33791971,1,-0.93885556,0.6838412699999999,1,-0.94138279,0.25525958,1,-0.8574434,0.42999661,1,-0.80787886,0.45460512,1,0.33117623,0.41118576,1,0.35341051,0.18335756,1,0.08738886799999999,0.15986409,1,0.26879091,0.2686762,1,0.25313276,-0.051166353,1,0.18468552,0.079604181,1,0.37104093,0.34568087,1,0.20913619,-0.1264126,1,0.16720879,0.28801832,1,0.23036415,0.60800299,1,0.30341332,0.67865646,1,0.5508005500000001,0.16339595,1,0.28148582,0.064959482,1,0.29051014,0.33149745,1,0.40696306,0.41576617,1,0.44716753,0.22264357,1,0.18497565,0.58715621,1,0.24244306,0.46639306,1,0.19712959,0.21275394,1,0.31515197,-0.76142816,1,0.31422351,-0.61474166,1,0.48146035,-0.37499354,1,0.3669023,-0.58996274,1,0.36235688,-0.4467016,1,0.30098147,-0.19715194,1,0.51551596,-0.50527098,1,0.51682258,-0.69007176,1,0.40377053,-0.51151005,1,0.37120957,-0.31008761,1,0.23975025,-0.31386849,1,0.46693284,-0.56698687,1,0.41189374,-0.43208257,1,0.26884016,-0.45776072,1,0.20508996,-0.58733636,1,0.68788602,-0.51442532,1,0.49566691,-0.45187643,1,0.59209125,-0.44498316,1,0.58033253,-0.35935396,1,-0.33458326,-0.068381646,1,-0.5163268600000001,-0.11303213,1,-0.49971346,0.22716175,1,-0.50422314,-0.025435166,1,-0.5462008,0.22185366,1,-0.50226762,-0.1711224,1,-0.5111151,0.11112274,1,-0.41268217,0.21540042,1,-0.57401365,-0.08605648,1,-0.36540366,0.074984834,1,-0.56915657,-0.28421594,1,-0.38693978,0.25382589,1,-0.43824772,0.025811759,1,-0.39776996,-0.076574237,1,-0.5101560000000001,0.033562658,1,-0.46060015,0.15036815,1,-0.31322251,0.16930771,1,-0.45533514,-0.02366582,1,-0.56958997,0.030658994,1,0.9027130799999999,-0.72190183,-1,1,-0.62297535,-1,0.11405811,0.12108462,-1,0.84679684,0.14716793,-1,0.79864211,-0.79062131,-1,0.3658299,0.25931984,-1,0.50269899,0.21959115,-1,0.28513802,0.17226462,-1,0.64849703,0.14283359,-1,0.73411053,0.20411954,-1,0.18019723,0.19130996,-1,0.58777334,0.26173712,-1,0.9318181,-0.038246185,-1,0.55180988,-0.89814562,-1,0.4039343,0.13210605,-1,0.67008902,-0.87541392,-1,0.97021841,-0.22455704,-1,0.70719821,-0.13932673,-1,0.85977741,-0.18336831,-1,0.35361052,-0.99369487,-1,0.86868673,-0.34573934,-1,0.18336024,-1,-1,0.7030111,-0.32876179,-1,0.021446659,-0.99553812,-1,-0.099481163,-0.91713094,-1,0.48377624,-0.29905345,-1,0.54035245,-0.44965779,-1,0.65084122,-0.48386274,-1,-0.54435588,-0.59002765,-1,-0.31177524,-0.9437694599999999,-1,-0.50364312,-0.72848623,-1,-0.41994176,-0.8371672100000001,-1,0.32770944,-0.4356605,-1,0.35501634,-0.55694914,-1,-0.71964102,-0.52769112,-1,-0.70677919,-0.36351216,-1,0.20546919,-0.51062288,-1,-0.78580044,-0.22354899,-1,-0.73779858,-0.078972641,-1,-0.65917032,0.048880024,-1,0.08753991999999999,-0.43893618,-1,-0.50235293,0.32453056,-1,-0.65363263,0.20977732,-1,0.10051289,-0.30396965,-1,0.0024385021,-0.35169816,-1,-0.22734394,0.62125513,-1,0.010593528,-0.25086011,-1,-0.47924497,0.5732460700000001,-1,0.10614371,0.76542659,-1,-0.011515201,0.25338436,1,0.80825354,0.69278344,1,-0.8178658,0.11711538,1,-0.97888869,0.36548453,1,0.32669097,0.51460958,1,0.43348386,-0.34115051,1,-0.43202507,0.11289952,1,0.028563194,-0.16630924,-1]],\"xticklab\":[\"-1.00\",\"-0.60\",\"-0.20\",\"0.20\",\"0.60\",\"1.00\"],\"yticklab\":[\"-1.00\",\"-0.60\",\"-0.20\",\"0.20\",\"0.60\",\"1.00\"],\"zticklab\":[\"1.00\",\"0.60\",\"0.20\",\"-0.20\",\"-0.60\",\"-1.00\"],\"xtick\":[0,0.2,0.4,0.6000000000000001,0.8,1],\"ytick\":[0,0.2,0.4,0.6000000000000001,0.8,1],\"ztick\":[0,0.2,0.4,0.6000000000000001,0.8,1],\"axislength\":[1,1,1]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Further reading\n\nThe tutorial \"Network Analysis and Visualization with R and igraph\"\nby Katherine Ognyanova [(link)](https://kateto.net/networks-r-igraph) comes with \nin-depth explanations of the built-in plotting function of `igraph`. \n\nFor further help on `ggraph` see the blog posts on layouts [(link)](https://www.data-imaginist.com/2017/ggraph-introduction-layouts/),\nnodes [(link)](https://www.data-imaginist.com/2017/ggraph-introduction-nodes/) and edges [(link)](https://www.data-imaginist.com/2017/ggraph-introduction-edges/) by `@thomasp85`. \nThomas is also the creator of `tidygraph` and there is also an introductory post on his blog [(link)](https://www.data-imaginist.com/2017/introducing-tidygraph/).\n\nMore details and algorithms of the `graphlayouts` package can be found on my blog \n([link1](http://blog.schochastics.net/post/stress-based-graph-layouts/),\n[link2](http://blog.schochastics.net/post/introducing-graphlayouts-with-got/)) and on\nthe pkgdown page of [graphlayouts](http://graphlayouts.schochastics.net/).\n\n",
    "supporting": [
      "visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<script src=\"site_libs/threejs-111/three.min.js\"></script>\n<script src=\"site_libs/threejs-111/Detector.js\"></script>\n<script src=\"site_libs/threejs-111/Projector.js\"></script>\n<script src=\"site_libs/threejs-111/CanvasRenderer.js\"></script>\n<script src=\"site_libs/threejs-111/TrackballControls.js\"></script>\n<script src=\"site_libs/threejs-111/StateOrbitControls.js\"></script>\n<script src=\"site_libs/scatterplotThree-binding-0.3.3/scatterplotThree.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}