{
  "hash": "f1424386aefae85e360d66962fa9710b",
  "result": {
    "engine": "knitr",
    "markdown": "# Two-Mode Networks\n\nA **two-mode network** is a network that consists of two disjoint sets of nodes (like people and events). Ties connect the two sets, for example participation of people in events. Other examples are \n\n- Affiliation networks (Membership in institutions/clubs)\n- Voting/Sponsorship networks (politicians and bills)\n- Citation network (authors and papers)\n- Co-Authorship networks (also authors and papers)\n\nThere are two ways of analysing a two-mode network. Either directly by using methods specifically created for such networks, or by projecting it to a regular one-mode network. The advantage of the former is that there is no information loss and the advantage of the latter is that we are working with more familiar data structures. The projection approach is more popular these days, but we will still introduce some direct methods to analyse two-mode networks. The main part of this chapter will however deal with the projection approach.\n\n\n## Packages Needed for this Chapter\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(networkdata)\n```\n:::\n\n\n\n\n\n\n## Two-mode data structure\nWe will discuss some methods tailored for two-mode networks via the famous \"southern women\" dataset consisting of 18 women who attended a series of 14 events. The network is included in the `networkdata` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"southern_women\")\nsouthern_women\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 1074643 UN-B 32 89 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 1074643 (vertex names):\n [1] EVELYN   --6/27 EVELYN   --3/2  EVELYN   --4/12 EVELYN   --9/26\n [5] EVELYN   --2/25 EVELYN   --5/19 EVELYN   --9/16 EVELYN   --4/8 \n [9] LAURA    --6/27 LAURA    --3/2  LAURA    --4/12 LAURA    --2/25\n[13] LAURA    --5/19 LAURA    --3/15 LAURA    --9/16 THERESA  --3/2 \n[17] THERESA  --4/12 THERESA  --9/26 THERESA  --2/25 THERESA  --5/19\n[21] THERESA  --3/15 THERESA  --9/16 THERESA  --4/8  BRENDA   --6/27\n[25] BRENDA   --4/12 BRENDA   --9/26 BRENDA   --2/25 BRENDA   --5/19\n[29] BRENDA   --3/15 BRENDA   --9/16 CHARLOTTE--4/12 CHARLOTTE--9/26\n+ ... omitted several edges\n```\n\n\n:::\n:::\n\n\n\n\n`igraph` interprets a network as a two-mode network if it has a logical node attribute called `type`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(V(southern_women)$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFALSE  TRUE \n   18    14 \n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](two-mode-networks_files/figure-html/southern-women-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nThe adjacency matrix of a two-mode network is referred to as  **biadjacency matrix** and can be obtained via `as_biadjacency_matrix()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- as_biadjacency_matrix(southern_women)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          6/27 3/2 4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\nEVELYN       1   1    1    1    1    1    0    1   1    0    0   0     0   0\nLAURA        1   1    1    0    1    1    1    1   0    0    0   0     0   0\nTHERESA      0   1    1    1    1    1    1    1   1    0    0   0     0   0\nBRENDA       1   0    1    1    1    1    1    1   0    0    0   0     0   0\nCHARLOTTE    0   0    1    1    1    0    1    0   0    0    0   0     0   0\nFRANCES      0   0    1    0    1    1    0    1   0    0    0   0     0   0\nELEANOR      0   0    0    0    1    1    1    1   0    0    0   0     0   0\nPEARL        0   0    0    0    0    1    0    1   1    0    0   0     0   0\nRUTH         0   0    0    0    1    0    1    1   1    0    0   0     0   0\nVERNE        0   0    0    0    0    0    1    1   1    0    0   1     0   0\nMYRNA        0   0    0    0    0    0    0    1   1    1    0   1     0   0\nKATHERINE    0   0    0    0    0    0    0    1   1    1    0   1     1   1\nSYLVIA       0   0    0    0    0    0    1    1   1    1    0   1     1   1\nNORA         0   0    0    0    0    1    1    0   1    1    1   1     1   1\nHELEN        0   0    0    0    0    0    1    1   0    1    1   1     0   0\nDOROTHY      0   0    0    0    0    0    0    1   1    0    0   0     0   0\nOLIVIA       0   0    0    0    0    0    0    0   1    0    1   0     0   0\nFLORA        0   0    0    0    0    0    0    0   1    0    1   0     0   0\n```\n\n\n:::\n:::\n\n\n\n\n## Direct Approach\nThe `tnet` and `bipartite` packages offer some methods to analyse two mode networks directly, by adapting tools for standard (one-mode) networks, like the methods described in previous sections.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tnet)\n```\n:::\n\n\n\n\n`tnet` implements a version of the clustering coefficient for two-mode networks. Remember that its one-mode equivalent is based on triangle counts, a structure that cannot exist in two-mode networks (think about it for a second).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransitivity(southern_women)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\ntransitivity(southern_women, type = \"local\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   EVELYN     LAURA   THERESA    BRENDA CHARLOTTE   FRANCES   ELEANOR     PEARL \n        0         0         0         0         0         0         0         0 \n     RUTH     VERNE     MYRNA KATHERINE    SYLVIA      NORA     HELEN   DOROTHY \n        0         0         0         0         0         0         0         0 \n   OLIVIA     FLORA      6/27       3/2      4/12      9/26      2/25      5/19 \n        0         0         0         0         0         0         0         0 \n     3/15      9/16       4/8      6/10      2/23       4/7     11/21       8/3 \n        0         0         0         0         0         0         0         0 \n```\n\n\n:::\n:::\n\n\n\n\nThe version implemented in `tnet` is based on cycles of length 6, which involves three nodes of each mode.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nel_women <- as_edgelist(southern_women, names = FALSE)\n\nclustering_tm(el_women)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7718968\n```\n\n\n:::\n\n```{.r .cell-code}\n# coefficient for first mode\nclustering_local_tm(el_women)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   node        lc\n1     1 0.7666667\n2     2 0.8421751\n3     3 0.7523437\n4     4 0.8387909\n5     5 1.0000000\n6     6 0.8690476\n7     7 0.7959184\n8     8 0.6462585\n9     9 0.6702509\n10   10 0.6740891\n11   11 0.7138810\n12   12 0.7695560\n13   13 0.7461929\n14   14 0.8379501\n15   15 0.8159204\n16   16 0.5407407\n17   17 0.5806452\n18   18 0.5806452\n```\n\n\n:::\n\n```{.r .cell-code}\n# coefficient for second mode\nclustering_local_tm(el_women[, 2:1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   node        lc\n1     1       NaN\n2     2       NaN\n3     3       NaN\n4     4       NaN\n5     5       NaN\n6     6       NaN\n7     7       NaN\n8     8       NaN\n9     9       NaN\n10   10       NaN\n11   11       NaN\n12   12       NaN\n13   13       NaN\n14   14       NaN\n15   15       NaN\n16   16       NaN\n17   17       NaN\n18   18       NaN\n19   19 1.0000000\n20   20 0.9487179\n21   21 0.9532967\n22   22 0.9644970\n23   23 0.9628253\n24   24 0.8135593\n25   25 0.7171825\n26   26 0.7791580\n27   27 0.7353630\n28   28 0.8544601\n29   29 0.9555556\n30   30 0.8844765\n31   31 0.8709677\n32   32 0.8709677\n```\n\n\n:::\n:::\n\n\n\n\nNote that it is very cumbersome to count these cycles. It is advisable to run this function only on fairly small networks.\n\nThe package does include some more two-mode specific functions (look for `*_tm()`), but the outcomes are equivalent to using its counterpart in igraph. \n\nThe `bipartite` package is tailored towards ecological network analysis. Relevant functions for standard two-mode networks are the same as in `tnet`.\n\n## Projection Approach\n\n### Weighted Projection\nBesides analyzing a two-mode network as-is, there is also the possibility to project it to one mode. \nMathematically, this is done by calculating $AA^T$ or $A^TA$, depending which mode we project on.\nAs an example, consider the southern women dataset again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB <- A %*% t(A)\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE FRANCES ELEANOR PEARL RUTH\nEVELYN         8     6       7      6         3       4       3     3    3\nLAURA          6     7       6      6         3       4       4     2    3\nTHERESA        7     6       8      6         4       4       4     3    4\nBRENDA         6     6       6      7         4       4       4     2    3\nCHARLOTTE      3     3       4      4         4       2       2     0    2\nFRANCES        4     4       4      4         2       4       3     2    2\nELEANOR        3     4       4      4         2       3       4     2    3\nPEARL          3     2       3      2         0       2       2     3    2\nRUTH           3     3       4      3         2       2       3     2    4\nVERNE          2     2       3      2         1       1       2     2    3\nMYRNA          2     1       2      1         0       1       1     2    2\nKATHERINE      2     1       2      1         0       1       1     2    2\nSYLVIA         2     2       3      2         1       1       2     2    3\nNORA           2     2       3      2         1       1       2     2    2\nHELEN          1     2       2      2         1       1       2     1    2\nDOROTHY        2     1       2      1         0       1       1     2    2\nOLIVIA         1     0       1      0         0       0       0     1    1\nFLORA          1     0       1      0         0       0       0     1    1\n          VERNE MYRNA KATHERINE SYLVIA NORA HELEN DOROTHY OLIVIA FLORA\nEVELYN        2     2         2      2    2     1       2      1     1\nLAURA         2     1         1      2    2     2       1      0     0\nTHERESA       3     2         2      3    3     2       2      1     1\nBRENDA        2     1         1      2    2     2       1      0     0\nCHARLOTTE     1     0         0      1    1     1       0      0     0\nFRANCES       1     1         1      1    1     1       1      0     0\nELEANOR       2     1         1      2    2     2       1      0     0\nPEARL         2     2         2      2    2     1       2      1     1\nRUTH          3     2         2      3    2     2       2      1     1\nVERNE         4     3         3      4    3     3       2      1     1\nMYRNA         3     4         4      4    3     3       2      1     1\nKATHERINE     3     4         6      6    5     3       2      1     1\nSYLVIA        4     4         6      7    6     4       2      1     1\nNORA          3     3         5      6    8     4       1      2     2\nHELEN         3     3         3      4    4     5       1      1     1\nDOROTHY       2     2         2      2    1     1       2      1     1\nOLIVIA        1     1         1      1    2     1       1      2     2\nFLORA         1     1         1      1    2     1       1      2     2\n```\n\n\n:::\n:::\n\n\n\n\nThis matrix can now be interpreted as a weighted network among the 18 women. Each entry corresponds to the number of times two women went to the same event.\n\nThe same can be achieved with the function `bipartite_projection()`, which returns both projections.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojs <- bipartite_projection(southern_women)\nprojs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$proj1\nIGRAPH a2c8a0f UNW- 18 139 -- \n+ attr: name (v/c), weight (e/n)\n+ edges from a2c8a0f (vertex names):\n [1] EVELYN --LAURA     EVELYN --BRENDA    EVELYN --THERESA   EVELYN --CHARLOTTE\n [5] EVELYN --FRANCES   EVELYN --ELEANOR   EVELYN --RUTH      EVELYN --PEARL    \n [9] EVELYN --NORA      EVELYN --VERNE     EVELYN --MYRNA     EVELYN --KATHERINE\n[13] EVELYN --SYLVIA    EVELYN --HELEN     EVELYN --DOROTHY   EVELYN --OLIVIA   \n[17] EVELYN --FLORA     LAURA  --BRENDA    LAURA  --THERESA   LAURA  --CHARLOTTE\n[21] LAURA  --FRANCES   LAURA  --ELEANOR   LAURA  --RUTH      LAURA  --PEARL    \n[25] LAURA  --NORA      LAURA  --VERNE     LAURA  --SYLVIA    LAURA  --HELEN    \n[29] LAURA  --MYRNA     LAURA  --KATHERINE LAURA  --DOROTHY   THERESA--BRENDA   \n+ ... omitted several edges\n\n$proj2\nIGRAPH e448615 UNW- 14 66 -- \n+ attr: name (v/c), weight (e/n)\n+ edges from e448615 (vertex names):\n [1] 6/27--3/2   6/27--4/12  6/27--9/26  6/27--2/25  6/27--5/19  6/27--9/16 \n [7] 6/27--4/8   6/27--3/15  3/2 --4/12  3/2 --9/26  3/2 --2/25  3/2 --5/19 \n[13] 3/2 --9/16  3/2 --4/8   3/2 --3/15  4/12--9/26  4/12--2/25  4/12--5/19 \n[19] 4/12--9/16  4/12--4/8   4/12--3/15  9/26--2/25  9/26--5/19  9/26--9/16 \n[25] 9/26--4/8   9/26--3/15  2/25--5/19  2/25--9/16  2/25--4/8   2/25--3/15 \n[31] 5/19--9/16  5/19--4/8   5/19--3/15  5/19--6/10  5/19--2/23  5/19--4/7  \n[37] 5/19--11/21 5/19--8/3   3/15--9/16  3/15--4/8   3/15--4/7   3/15--6/10 \n[43] 3/15--11/21 3/15--8/3   3/15--2/23  9/16--4/8   9/16--4/7   9/16--6/10 \n+ ... omitted several edges\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](two-mode-networks_files/figure-html/plot_weighted_proj-1.png){width=672}\n:::\n:::\n\n\n\n\nAs you can see, the network is weighted and very dense. In principle it is possible to analyze the network as is, but a very common step is to binarize the\nnetwork. In doing so, we basically turn the network into a simple undirected one-mode network. This makes all methods we described in the first few sections applicable to the network (at least in theory).\n\n### Simple Binary Projections\nThe simplest way of binarizing a weighted projection is to define a global threshold and remove a tie if its weight is below the global threshold. A popular choice is to take the mean edge weight (sometimes also plus the 1-2 times the standard deviation).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwomen_proj <- projs$proj1\nthreshold <- mean(E(projs$proj1)$weight)\nwomen_bin <- delete_edges(women_proj, which(E(women_proj)$weight <= threshold))\nwomen_bin <- delete_edge_attr(women_bin, \"weight\")\nwomen_bin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH af676e5 UN-- 18 46 -- \n+ attr: name (v/c)\n+ edges from af676e5 (vertex names):\n [1] EVELYN --LAURA     EVELYN --BRENDA    EVELYN --THERESA   EVELYN --CHARLOTTE\n [5] EVELYN --FRANCES   EVELYN --ELEANOR   EVELYN --RUTH      EVELYN --PEARL    \n [9] LAURA  --BRENDA    LAURA  --THERESA   LAURA  --CHARLOTTE LAURA  --FRANCES  \n[13] LAURA  --ELEANOR   LAURA  --RUTH      THERESA--BRENDA    THERESA--CHARLOTTE\n[17] THERESA--FRANCES   THERESA--ELEANOR   THERESA--RUTH      THERESA--PEARL    \n[21] THERESA--NORA      THERESA--VERNE     THERESA--SYLVIA    BRENDA --CHARLOTTE\n[25] BRENDA --FRANCES   BRENDA --ELEANOR   BRENDA --RUTH      FRANCES--ELEANOR  \n[29] ELEANOR--RUTH      RUTH   --VERNE     RUTH   --SYLVIA    VERNE  --SYLVIA   \n+ ... omitted several edges\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](two-mode-networks_files/figure-html/southern-women-bin-plot-1.png){width=672}\n:::\n:::\n\n\n\n\n### Model-based Binary Projections\nThe global threshold method is very simple but in many cases leads to undesirable structural features. More sophisticated tools work with statistical models in the background which determine if an edge weight differs enough from the expected value of an underlying null model. If so, the edge is kept in the binary projection. Many of such models are implemented in the `backbone` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(backbone)\n```\n:::\n\n\n\n\nThe idea behind all of the models is always the same:\n\n1. Create the weighted projection of interest, e.g. `B <- A%*%t(A)`\n2. Generate random two-mode networks according to a given model.\n3. Compare if the values `B[i,j]` differ significantly from the distribution of values in the random projections.\n\nThe only difference in all models is the construction of the random two-mode networks which follow different rules:\n\n- **Fixed Degree Sequence Model** `fdsm()`: Create random two-mode networks with the same row and column sums as `A`.\n- **Fixed Column Model** `fixedcol()`: Create random two-mode networks with the same column sums as `A`.\n- **Fixed Row Model** `fixedrow()`: Create random two-mode networks with the same row sums as `A`.\n- **Fixed Fill Model** `fixedfill()`: Create random two-mode networks with the same number of ones as `A`.\n- **Stochastic Degree Sequence Model** `sdsm()`: Create random two-mode networks with *approximately* the same row and column sums as `A`.\n\nBefore we move to an actual use case, you may ask: So which model is the right one for me? That is actually quite a tricky question.\nThere is some [guidance](https://doi.org/10.1038/s41598-021-03238-3) available but in general you can follow these rough guidelines:\n\n1. Use the model that fits you empirical setting or a known link formation process. If that link formation process dictates that row sums are fixed but column sums not, then choose `fixedow()`. \n2. Use `fdsm()` if your network is small enough. Sampling from the FDSM is quite expensive.\n3. Use the `sdsm()` for large networks.\n\nGiven that there is never a \"ground-truth\" binary projection, any choice of model is fine as long as it is motivated substantively and not merely because it fits the papers narrative best.\n\nTo illustrate the model fitting, we use a bill cosponsorship of the Senate 2015. A link between a senator and a bill exists, if they sponsored it. We are no interested in how the binary projection of Senators looks like.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"cosponsor\")\ncosponsor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 6eddec8 UN-B 3984 26392 -- \n+ attr: name (v/c), type (v/l), party (v/c)\n+ edges from 6eddec8 (vertex names):\n [1] 115s1   --Enzi, Michael B.    115s10  --Cardin, Benjamin L.\n [3] 115s10  --Wicker, Roger F.    115s100 --Alexander, Lamar   \n [5] 115s1000--Franken, Al         115s1000--Murray, Patty      \n [7] 115s1000--Brown, Sherrod      115s1000--Warren, Elizabeth  \n [9] 115s1000--Markey, Edward J.   115s1001--Crapo, Mike        \n[11] 115s1001--Blumenthal, Richard 115s1001--Murphy, Christopher\n[13] 115s1001--Cassidy, Bill       115s1001--Alexander, Lamar   \n[15] 115s1001--Bennet, Michael F.  115s1002--Moran, Jerry       \n+ ... omitted several edges\n```\n\n\n:::\n:::\n\n\n\n\nGiven that the network is fairly large, we will use the SDSM. Note that all models create the projection for the mode where `type == FALSE`. If you want to project on the `TRUE` mode, you need to invert the type attribute. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsenators <- sdsm(cosponsor, alpha = 0.05, signed = FALSE)\nsenators\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 70e5489 UN-- 110 1591 -- \n+ attr: name (v/c), party (v/c)\n+ edges from 70e5489 (vertex names):\n [1] Enzi, Michael B.--Wicker, Roger F. Enzi, Michael B.--Alexander, Lamar\n [3] Enzi, Michael B.--Crapo, Mike      Enzi, Michael B.--Moran, Jerry    \n [5] Enzi, Michael B.--Scott, Tim       Enzi, Michael B.--Daines, Steve   \n [7] Enzi, Michael B.--Perdue, David    Enzi, Michael B.--Blunt, Roy      \n [9] Enzi, Michael B.--Inhofe, James M. Enzi, Michael B.--Barrasso, John  \n[11] Enzi, Michael B.--Fischer, Deb     Enzi, Michael B.--Ernst, Joni     \n[13] Enzi, Michael B.--Rounds, Mike     Enzi, Michael B.--Kennedy, John   \n[15] Enzi, Michael B.--Flake, Jeff      Enzi, Michael B.--Hoeven, John    \n+ ... omitted several edges\n```\n\n\n:::\n:::\n\n\n\n\nFor `signed = FALSE`, a one-tailed test is performed for each edge with a non-zero weight. It yields a projection that preserves edges whose weights are significantly stronger than expected in the null model. \n\nWhen `signed = TRUE`, a two-tailed test is performed for every pair of nodes. It yields a backbone that contains positive edges for edges whose weights are significantly stronger, and negative edges for edges whose weights are significantly weaker, than expected in the chosen null model. The projections thus becomes a signed network (see @sec-signed-networks).\n\nThe figure below shows the not so surprising result that Democrats and Republicans do not tend to significantly cosponsor the same bills.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](two-mode-networks_files/figure-html/cosponsor-plot-1.png){width=672}\n:::\n:::\n\n\n\n\n## Notable Packages\n\n- `incidentally` to create random two-mode networks with given structural features\n\n## Scientific Reading\n\nFaust, K. (1997). Centrality in affiliation networks. Social networks, 19(2), 157-191.\n\nEverett, M. G., & Borgatti, S. P. (2013). The dual-projection approach for two-mode networks. Social networks, 35(2), 204-210.\n\nOpsahl, T. (2013). Triadic closure in two-mode networks: Redefining the global and local clustering coefficients. Social networks, 35(2), 159-167.\n\nNeal, Z. P. (2014). The backbone of bipartite projections: Inferring relationships from co-authorship, co-sponsorship, co-attendance, and other co-behaviors. Social Networks, 39, 84-97. \n\nNeal, Z. P., Domagalski, R., and Sagan, B. (2021). Comparing Alternatives to the Fixed Degree Sequence Model for Extracting the Backbone of Bipartite Projections. Scientific Reports, 11, 23929. \n",
    "supporting": [
      "two-mode-networks_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}