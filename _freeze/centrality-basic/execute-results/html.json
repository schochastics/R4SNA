{
  "hash": "28272d07482b3cd5ec70e40815e75136",
  "result": {
    "engine": "knitr",
    "markdown": "# Centrality\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(netrankr)\nlibrary(networkdata)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggplot2\n```\n\n\n:::\n:::\n\n\n## Introduction\n\nIn this chapter, we learn about network centrality, a key concept for identifying the most influential nodes within networks. \nIn a nutshell, a measure of centrality is an index that assigns a numeric values to the nodes of the network. The higher the value, the more central the node. \"Being central\" is a very ambiguous term and it is thus no surprise that there exists a large variety of \nindices that assess centrality with very different structural properties of the network.\n\n[INSERT PERIODIC TABLE]\n\n## Centrality Indices `igraph`\n\nThe package `igraph` implements the following 10 indices:\n\n- degree (`degree()`)\n- weighted degree (`strength()`)\n- betweenness (`betweenness()`)\n- closeness (`closeness()`)\n- eigenvector (`eigen_centrality()`)\n- alpha centrality (`alpha_centrality()`)\n- power centrality (`power_centrality()`)\n- PageRank (`page_rank()`)\n- eccentricity (`eccentricity()`)\n- hubs and authorities (`authority_score()` and `hub_score()`)\n- subgraph centrality (`subgraph_centrality()`)\n\nTo illustrate some of the indices, we use the \"dbces11\" graph which is part of the `netrankr` package.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"dbces11\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](centrality-basic_files/figure-html/dbces11_basic_plot-1.png){width=672}\n:::\n:::\n\n\n**degree** simply counts the number of neighbors a node has.\n\n::: {.cell}\n\n```{.r .cell-code}\ndegree(dbces11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA B C D E F G H I J K \n1 1 2 2 3 4 4 4 4 4 5 \n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](centrality-basic_files/figure-html/degree_dbces11_plot-1.png){width=672}\n:::\n:::\n\n\n\n**closeness** computes the shortest path distances among nodes. The most central node has the\nminimum distance to all other nodes (Since high scores are associated with central nodes, the distances are inverted).\n\n::: {.cell}\n\n```{.r .cell-code}\ncloseness(dbces11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        A         B         C         D         E         F         G         H \n0.0370370 0.0294118 0.0400000 0.0400000 0.0500000 0.0588235 0.0526316 0.0555556 \n        I         J         K \n0.0555556 0.0526316 0.0555556 \n```\n\n\n:::\n:::\n\n\nThe animation below gives an intuition on the calculation for one node.\n![](assets/img/closeness.gif)\n\n**betweeness** is the number of shortest paths that pass through a node (divided by the total number of shortest paths)  \n\n::: {.cell}\n\n```{.r .cell-code}\nbetweenness(dbces11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       A        B        C        D        E        F        G        H \n 0.00000  0.00000  0.00000  9.00000  3.83333  9.83333  2.66667 16.33333 \n       I        J        K \n 7.33333  1.33333 14.66667 \n```\n\n\n:::\n:::\n\n\nTo get an intuition what it means to have a high betweenness, check the network below.\n\n::: {.cell}\n::: {.cell-output-display}\n![](centrality-basic_files/figure-html/betweenness_bridge-1.png){width=672}\n:::\n:::\n\n\nAny shortest path from the right will pass through the red node and vice versa. The \nred note is thus a sort of \"gatekeeper\" for any information that is passed from left to right.\n\n\n**eigenvector centrality** extends the idea of degree by assuming that a node is central if it is connected to other central nodes.\n\n::: {.cell}\n\n```{.r .cell-code}\neigen_centrality(dbces11)$vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        A         B         C         D         E         F         G         H \n0.2259630 0.0645825 0.3786244 0.2415182 0.5709057 0.9846544 1.0000000 0.8386195 \n        I         J         K \n0.9113529 0.9986474 0.8450304 \n```\n\n\n:::\n:::\n\n\n**subgraph centrality** is a bit more abstract but what it does is summing up all closed walks weighting them by the \ninverse factorial of its length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubgraph_centrality(dbces11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      A       B       C       D       E       F       G       H       I       J \n1.82510 1.59540 3.14857 2.42309 4.38713 7.80726 7.93941 6.67278 7.03267 8.24212 \n      K \n7.38956 \n```\n\n\n:::\n:::\n\n\nThe remaining indices are mostly designed for directed networks, **page rank** being the prime example. Note, though that\nthe indices above can also be applied to directed networks. \n\nIf we highlight the most central node for the calculated indices, we get the following. \n\n::: {.cell}\n::: {.cell-output-display}\n![](centrality-basic_files/figure-html/dbces11_plot-1.png){width=672}\n:::\n:::\n\n\nSo each index picks a different node as most central. While this is just a toy example, it highlights how influential the choice of indices can be in empirical settings.\n\n\n## Centrality indices `sna`\nThe `sna` package implements roughly the same indices as `igraph` but adds:\n\n- flow betweenness (`flowbet()`)\n- load centrality (`loadcent()`)\n- Gil-Schmidt Power Index (`gilschmidt()`)\n- information centrality (`infocent()`)\n- stress centrality (`stresscent()`)\n\n## Other Centrality Packages\nThere are also some dedicated centrality packages, such as `centiserve`, `CINNA`, `influenceR` and `keyplayer`.\nThe biggest in terms of implemented indices is currently `centiserve` with a total of 33 indices.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(centiserve)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(lsf.str(\"package:centiserve\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"averagedis\"            \"barycenter\"            \"bottleneck\"           \n [4] \"centroid\"              \"closeness.currentflow\" \"closeness.freeman\"    \n [7] \"closeness.latora\"      \"closeness.residual\"    \"closeness.vitality\"   \n[10] \"clusterrank\"           \"communibet\"            \"communitycent\"        \n[13] \"crossclique\"           \"decay\"                 \"diffusion.degree\"     \n[16] \"dmnc\"                  \"entropy\"               \"epc\"                  \n[19] \"geokpath\"              \"hubbell\"               \"katzcent\"             \n[22] \"laplacian\"             \"leaderrank\"            \"leverage\"             \n[25] \"lincent\"               \"lobby\"                 \"markovcent\"           \n[28] \"mnc\"                   \"pairwisedis\"           \"radiality\"            \n[31] \"salsa\"                 \"semilocal\"             \"topocoefficient\"      \n```\n\n\n:::\n:::\n\n\nThe description of `CINNA` says\n\"Functions for computing, comparing and demonstrating top informative centrality measures within a network.\"\nMost of the indices in the package are imported from other package, such as `centiserve`. In addition, there are:\n\n- Dangalchev closeness (`dangalchev_closeness_centrality()`)\n- group centrality (`group_centrality()`)\n- harmonic closeness (`harmonic_centrality()`)\n- local bridging centrality (`local_bridging_centrality()`)\n\nThe function `calculate_centralities()` can be used to calculate all applicable indices\nto a network. The primary purpose of the package is to facilitate the choice of indices\nby visual and statistical tools. If you are interested in the details, see this [tutorial](https://www.datacamp.com/community/tutorials/centrality-network-analysis-R)\nand this [vignette](https://cran.r-project.org/web/packages/CINNA/vignettes/CINNA.html).\n\n`influenceR` and `keyplayer` are comparably small packages which implement only a small number of indices.\n\n## Thoughts\n\nThe choice of indices can be overwhelming and little guidelines exist on when to choose what.\nThe worst thing to do in any case is to apply a handful of indices and pick the result that suits your\ninterpretation best. In best case, you have substantive arguments to apply an index and the result does match the hypothesis (or not).\n\n\n## Use case: Florentine Families\n\nA classic example application of centrality indices is the \"Florentine Families\" dataset, which is included in the `networkdata` package.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"flo_marriage\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](centrality-basic_files/figure-html/flo_plot-1.png){width=672}\n:::\n:::\n\n\nTh network shows marriage ties among Renaissance Families in Florence. Marriages at that time were\nstrategic to improve the standing of families in society. The size of the names is proportional to the \nwealth of the families. Although the Strozzi were the wealthiest family, it was ultimately the Medici\nwho became the most powerful family. This is in part due to their central position within this marriage network.\n\nThe table bellow shows the ranking for the four most commonly used centrality indices (1=top rank).\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|name         | degree| betweenness| closeness| eigen|\n|:------------|------:|-----------:|---------:|-----:|\n|Acciaiuoli   |   13.5|          14|      11.5|    12|\n|Albizzi      |    6.5|           3|       3.5|     9|\n|Barbadori    |   10.5|           8|       6.5|    10|\n|Bischeri     |    6.5|           6|       8.0|     6|\n|Castellani   |    6.5|          10|       9.5|     8|\n|Ginori       |   13.5|          14|      13.0|    14|\n|Guadagni     |    2.5|           2|       5.0|     5|\n|Lamberteschi |   13.5|          14|      14.0|    13|\n|Medici       |    1.0|           1|       1.0|     1|\n|Pazzi        |   13.5|          14|      15.0|    15|\n|Peruzzi      |    6.5|          11|      11.5|     7|\n|Pucci        |   16.0|          14|      16.0|    16|\n|Ridolfi      |    6.5|           5|       2.0|     3|\n|Salviati     |   10.5|           4|       9.5|    11|\n|Strozzi      |    2.5|           7|       6.5|     2|\n|Tornabuoni   |    6.5|           9|       3.5|     4|\n\n\n:::\n:::\n\n\nNo matter what structural feature we consider to be important, the Medici always have the most advantageous position.\n",
    "supporting": [
      "centrality-basic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}