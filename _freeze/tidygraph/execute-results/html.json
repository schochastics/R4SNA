{
  "hash": "4c32b3671177f21a6089488cc9cb7121",
  "result": {
    "engine": "knitr",
    "markdown": "# Tidy Network Analysis\n\nThe main focus of this part is to introduce the tidy approach for network analysis.\n\n## Required libraries\n\nTo run all the code in this part, you need to install and load two packages.\n```r\ninstall.packages(\"tidygraph\")\ndevtools::install_github(\"schochastics/networkdata\")\n```\n\n`tidygraph` implements the tidy approach for network analysis. `networkdata` contains a diverse set of\nnetwork dataset. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'tidygraph'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(networkdata)\n```\n:::\n\n\n\n\n\n\nMake sure you have at least the version given below. Some of the examples may not be backward compatible.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"tidygraph\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.3.1'\n```\n\n\n:::\n\n```{.r .cell-code}\npackageVersion(\"networkdata\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '0.2.1'\n```\n\n\n:::\n:::\n\n\n\n\n## What is tidy network data?\n\nOn first glance, there is not much tidiness in networks or the ways it is usually encoded, like a \ngraph, adjacency matrix, edgelist, etc. How should this fit into a single data frame? If you are an avid\n`igraph` user, then you may suspect the answer. It doesn't fit, but it fits in two with `graph_from_data_frame()` which takes two data frames, one for nodes and one for edges, as input. In other words, we can represent \na network as two separate data frames. One for the nodes and node attributes, and one for the edges and edge attributes. Working with these two data frames together is the premise for the `tidygraph` package.\nIf you are interested in more technical details on how this is implemented under the hood, see the [introductory blog post](https://www.data-imaginist.com/2017/introducing-tidygraph/) for the package.\n\n## Why tidy network data?\n\nThis is a good question. If you aren't a fan of the tidyverse, then you should probably move along and\nstick with established packages such as `igraph` or `sna` which offer the exact same functionalities (`tidygraph` actually imports most of `igraph`). If you appreciate the tidyverse, then there is no need \nfor convincing you that this is a good idea. If you are indifferent, then I hope I can make a case \nfor the tidy framework below. To start off with, the package does a great job to harmonize many network analytic tasks. For instance, you do not need to know all the different centrality indices that are implemented. You simply type `centrality_` and press tab in the RStudio console and get all functions that allow the calculation of a \ncentrality index. Other node level functions are accessible via `node_*()` and edge level measures via `edge_*()`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}