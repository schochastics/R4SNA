{
  "hash": "d8c67bb206a3cbb25a46925186f5ffb9",
  "result": {
    "engine": "knitr",
    "markdown": "# Cohesive Subgroups\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(networkdata)\n```\n:::\n\n\n\n\n\n## Cliques \n\nA *clique* in a network is a set of nodes that form a complete subnetwork within a network (called a complete **subgraph**). A **maximal clique** is a clique that cannot be extended to a bigger clique by addding more nodes to it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"clique_graph\")\n```\n:::\n\n\nAll maximal cliques can be calculated with `max_cliques()` (only feasible for fairly small networks). The min parameter can be used to set a minimum size. Here, we want to ignore all cliques of size $2$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# only return cliques with three or more nodes\ncl <- max_cliques(clique_graph, min = 3)\ncl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n+ 3/30 vertices, from 0193e05:\n[1]  9 17 18\n\n[[2]]\n+ 3/30 vertices, from 0193e05:\n[1] 7 4 5\n\n[[3]]\n+ 3/30 vertices, from 0193e05:\n[1] 7 4 8\n\n[[4]]\n+ 3/30 vertices, from 0193e05:\n[1] 10  2 11\n\n[[5]]\n+ 3/30 vertices, from 0193e05:\n[1] 16 12 15\n\n[[6]]\n+ 3/30 vertices, from 0193e05:\n[1] 6 1 5\n\n[[7]]\n+ 4/30 vertices, from 0193e05:\n[1] 12 13 15 14\n\n[[8]]\n+ 3/30 vertices, from 0193e05:\n[1] 12  2  1\n\n[[9]]\n+ 5/30 vertices, from 0193e05:\n[1] 1 2 5 4 3\n```\n\n\n:::\n:::\n\n\nThe figure below shows the network and the found maximal cliques.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/plot-clique-graph-1.png){width=672}\n:::\n:::\n\n\nRelated to cliques is the **k-core decomposition** of a network. A k-core is a subgraph in which every node has at least k neighbors within the subgraph. A k-core is thus a relaxed version of a clique.  \nThe function `coreness()` can be used to calculate the k-core membership for each node.\n\n::: {.cell}\n\n```{.r .cell-code}\nkcore <- coreness(clique_graph)\nkcore\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 4 4 4 4 4 3 2 2 2 2 2 3 3 3 3 3 2 2 1 1 1 1 1 1 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/kcore_plot-1.png){width=672}\n:::\n:::\n\n\nCliques are the prototypical and most strict definition of a cohesive subgroup in a network. In empirical networks, however, we rarely encounter situations where we can partition the whole network into a set of \ncliques. The relaxed version of this problem is that of clustering, also referred to as **comunity detection**. \n\n## Comunity detection\n\nA cluster is loosely defined as a group of nodes which are internally densely and externally sparsely connected. The network below shows an example for a network with a visible and intuitive cluster structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# labeL; clustered-graph\n#| echo: FALSE\n\nn1 <- 5\nn2 <- 20\nset.seed(1234)\ng <- sample_islands(n1, n2, 0.9, 5)\ng <- simplify(g)\nV(g)$grp <- rep(LETTERS[1:n1], each = n2)\nggraph(g, \"stress\") +\n    geom_edge_link0(edge_linewidth = 0.2, edge_color = \"grey66\") +\n    geom_node_point(shape = 21, size = 5, aes(fill = grp), show.legend = FALSE) +\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](clustering_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nIn contrast, the network below does not really seem to have any well defined cluster structure.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/random-graph-1.png){width=672}\n:::\n:::\n\n\nThe following algorithms for graph clustering are implemented in `igraph`.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"cluster_edge_betweenness\"  \"cluster_fast_greedy\"      \n [3] \"cluster_fluid_communities\" \"cluster_infomap\"          \n [5] \"cluster_label_prop\"        \"cluster_leading_eigen\"    \n [7] \"cluster_leiden\"            \"cluster_louvain\"          \n [9] \"cluster_optimal\"           \"cluster_spinglass\"        \n[11] \"cluster_walktrap\"         \n```\n\n\n:::\n:::\n\n\nMost of these algorithms are based on \"modularity maximization\". Modularity is defined as the fraction of edges that fall within given groups minus the expected fraction if edges were distributed at random.\n\nThe workflow of a cluster analysis is always the same, independent from the chosen method. We illustrate the workflow using the infamous karate club network.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"karate\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/karate-plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute clustering\nclu <- cluster_louvain(karate)\n\n# cluster membership vector\nmem <- membership(clu)\nmem\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 2 2 2 1 3 1 2 1 1 1 3 3 2 1 3 1 3 1 3 4 4 4 3 4 4 3 3 4 3 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# clusters as list\ncom <- communities(clu)\ncom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`1`\n [1]  1  2  3  4  8 10 12 13 14 18 20 22\n\n$`2`\n[1]  5  6  7 11 17\n\n$`3`\n [1]  9 15 16 19 21 23 27 30 31 33 34\n\n$`4`\n[1] 24 25 26 28 29 32\n```\n\n\n:::\n:::\n\n\nTo compare the quality of clusterings, we can compute the modularity score for each output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimc <- cluster_infomap(karate)\nlec <- cluster_leading_eigen(karate)\nloc <- cluster_louvain(karate)\nsgc <- cluster_spinglass(karate)\nwtc <- cluster_walktrap(karate)\nscores <- c(\n    infomap = modularity(karate, membership(imc)),\n    eigen = modularity(karate, membership(lec)),\n    louvain = modularity(karate, membership(loc)),\n    spinglass = modularity(karate, membership(sgc)),\n    walk = modularity(karate, membership(wtc))\n)\nscores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  infomap     eigen   louvain spinglass      walk \n 0.402038  0.393409  0.419790  0.419790  0.353222 \n```\n\n\n:::\n:::\n\n\nFor the karate network, `cluster_spinglass()` produces the highest modularity score.\nThe corresponding clustering is shown below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/karate-plot-clu-1.png){width=672}\n:::\n:::\n\n\nModularity maximization is still widely considered as the state-of-the-art clustering method\nfor networks. There are, however, some technical shortcomings that one should be aware of.\nOne of those is the so called \"resolution limit\". When modularity is being maximized, it can happen\nthat smaller clusters are merged together to form bigger clusters. The prime example is the graph that\nconsists of cliques connected in a ring.\n\n\n::: {.cell}\n\n:::\n\n\nThe figure below shows such a graph, consisting of 50 cliques of size 5. \n\n\n::: {.cell width='8' height='8'}\n::: {.cell-output-display}\n![](clustering_files/figure-html/plot-K50-blank-1.png){width=672}\n:::\n:::\n\n\nIntuitively, any clustering method should return a cluster for each clique.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclu_louvain <- cluster_louvain(K50)\ntable(membership(clu_louvain))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n15 10 10 10 10 15 15 10 10 15 10 10 10 15 10 10 10 10 15 10 10 10 \n```\n\n\n:::\n:::\n\n\nA clustering algorithm that fixes this issue is the leiden algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclu_leiden <- cluster_leiden(K50, objective_function = \"CPM\", resolution_parameter = 0.5)\ntable(membership(clu_leiden))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n 5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5 \n```\n\n\n:::\n:::\n\n\nThe figure below shows the clusters computed with the louvain method in grey and the leiden method in red.\n\n\n::: {.cell width='8' height='8'}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDon't know how to automatically pick scale for object of type <membership>.\nDefaulting to continuous.\nDon't know how to automatically pick scale for object of type <membership>.\nDefaulting to continuous.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](clustering_files/figure-html/plot-K50-clu-1.png){width=672}\n:::\n:::\n\n\nIf you are interested in the technical details of the Leiden method, check out the [original paper](https://www.nature.com/articles/s41598-019-41695-z). \n\n## Blockmodeling\n\nBlockmodeling is a more formal approach that aims to simplify the network's structure into blocks based on patterns of connections between nodes. Instead of focusing on the density of connections, it categorizes the relationships between different groups (or blocks) of nodes according to the roles they play in the network.\n\nThe goal is to reduce the complexity of the network by identifying roles and positions within the network, where nodes in the same block have similar patterns of connections to other blocks, rather than necessarily being densely connected to each other.\n\nBlockmodeling involves partitioning the network into blocks and then modeling the connections between these blocks. It can be done through conventional (deterministic) or stochastic approaches, including k-block modeling and stochastic blockmodeling.\n\nBlockmodeling is particularly useful in sociology for role analysis and in organizational studies, where it's important to understand how different groups (e.g., departments, hierarchies) interact, regardless of the density of the connections within each group.\n\nThere are several packages that implement different kinds of (stochastic) blockmodels. The most basic approaches are implemented in the package `blockmodeling`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(blockmodeling)\n```\n:::\n\n\nIn principle, blockmodels can also be used for clustering, as we will illustrate on this random network with 3 dense blocks of size 20.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](clustering_files/figure-html/random-graph2-1.png){width=672}\n:::\n:::\n\n\nThe disadvantage is that we need to specify a lot more parameters than for community detection. \n\n::: {.cell}\n\n```{.r .cell-code}\nA <- as_adj(g)\nblk <- matrix(\n    c(\n        \"com\", \"nul\", \"nul\",\n        \"nul\", \"com\", \"nul\",\n        \"nul\", \"nul\", \"com\"\n    ),\n    nrow = 3\n)\nblk\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]  [,2]  [,3] \n[1,] \"com\" \"nul\" \"nul\"\n[2,] \"nul\" \"com\" \"nul\"\n[3,] \"nul\" \"nul\" \"com\"\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- optRandomParC(\n    M = A, k = 3, approaches = \"bin\",\n    blocks = blk, rep = 5, mingr = 20, maxgr = 20\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\nStarting optimization of the partiton 1 of 5 partitions.\nStarting partition: 1 1 1 2 2 3 1 1 1 2 3 1 2 1 2 1 1 3 1 3 3 1 2 1 2 3 3 1 3 2 3 3 1 2 1 2 2 3 1 3 2 3 2 3 2 2 1 3 3 2 2 3 2 1 3 3 2 2 3 1 \nFinal error: 364 \nFinal partition:    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n\n\nStarting optimization of the partiton 2 of 5 partitions.\nStarting partition: 2 1 3 3 2 1 3 2 2 1 2 3 3 2 1 1 1 1 3 2 1 3 3 2 1 1 3 1 1 1 1 1 2 1 2 3 1 3 2 1 2 3 3 3 2 2 2 1 2 3 3 2 3 1 2 3 2 2 3 3 \nFinal error: 364 \nFinal partition:    2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n\n\nStarting optimization of the partiton 3 of 5 partitions.\nStarting partition: 1 3 1 2 3 2 3 2 3 1 2 3 1 3 1 1 3 3 1 2 1 2 1 3 2 2 2 3 1 2 2 3 2 1 2 3 3 2 1 3 2 1 1 1 2 1 2 1 3 2 1 2 3 2 3 3 1 1 3 3 \nFinal error: 364 \nFinal partition:    2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n\n\nStarting optimization of the partiton 4 of 5 partitions.\nStarting partition: 2 3 3 1 1 1 3 1 2 1 1 1 1 3 2 1 1 2 3 2 1 2 1 3 1 2 1 2 2 1 3 2 1 2 2 2 1 2 3 2 3 3 1 3 3 1 3 2 2 3 3 2 3 3 3 3 2 3 1 2 \nFinal error: 364 \nFinal partition:    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n\n\nStarting optimization of the partiton 5 of 5 partitions.\nStarting partition: 3 1 3 3 1 1 2 2 2 2 1 3 1 2 1 2 3 3 1 3 3 1 3 1 1 1 1 3 3 2 2 2 2 3 2 3 3 3 3 2 1 2 3 1 1 2 2 1 2 1 1 2 1 2 2 2 3 1 3 3 \nFinal error: 364 \nFinal partition:    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n\n\nOptimization of all partitions completed\nAll 5 solutions have err 364 \n```\n\n\n:::\n:::\n\n\n- `k`: number of blocks needs to be specified beforehand\n- `approaches`: defines the type of blockmodel approach to be used. \"bin\" is for binary and \"val\" for valued blockmodeling. There are several more possibilities available in the help of the function\n- `blocks`: allowed block types. Basically, what defines a block in the network. In our example we give a strict patterning that corresponds to a clustering. The diagonal blocks should be complete (\"com\") and offdiagonals should be empty (\"nul\"). So in the best case, we have 3 disconnected cliques. Again, consult the help for more available block options.\n- `rep`: number of random starting partitions to start the iteration from\n- `mingr` and `maxgr`: min and max size of the blocks. \n\nthe result can be accessed with `clu`.\n\n::: {.cell}\n\n```{.r .cell-code}\nclu(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n[39] 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n\n\n:::\n:::\n\n\nNote that this type of Blockmodeling is computationally expensive and best suited for small networks. \n\nLooking at a more realistic dataset, we load the `baker` dataset from the `blockmodeling` package. The dataset includes citation data between social work journals for 1985-86.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"baker\")\ndiag(baker) <- 0\n\nplotMat(baker,\n    main = \"Baker Network Data\",\n    mar = c(1, 1, 3, 1), title.line = 2\n)\n```\n\n::: {.cell-output-display}\n![](clustering_files/figure-html/load-baker-1.png){width=672}\n:::\n:::\n\n\nFirst, we run a binary blockmodel. This time we increase the number of repetions to 1000 and instead of giving a lear block structure, we just specify, what type of blocks we want our result to include. How they are distributed, we do not care and let the algorithm decide. We run the optimization in parallel (`nCores = 0`), which requires the package `doParallel` to be installed.\n\n::: {.cell}\n\n```{.r .cell-code}\nbaker_binary <- baker\nbaker_binary[baker_binary > 0] <- 1\n\nres_baker_binary <- optRandomParC(\n    M = baker_binary, k = 3, rep = 1000,\n    nCores = 0, blocks = c(\"nul\", \"com\"), approach = \"bin\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: doParallel\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: doRNG\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in optRandomParC(M = baker_binary, k = 3, rep = 1000, nCores = 0, :\nuseLB not set and now set to TRUE. parLapplyLB will be used. Results will not\nbe reproducible.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\nOptimization of all partitions completed\n1 solution(s) with minimal error = 47 found. \n```\n\n\n:::\n:::\n\n\nThe obtained optimal block structure can be accessed via `IM`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIM(res_baker_binary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]  [,2]  [,3] \n[1,] \"com\" \"nul\" \"com\"\n[2,] \"com\" \"nul\" \"nul\"\n[3,] \"com\" \"nul\" \"com\"\n```\n\n\n:::\n:::\n\n\nThe resulting blocks can be visualized via the `plot` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n    res_baker_binary,\n    main = \"Baker Binary Network Data\",\n    mar = c(1, 2, 3, 1), title.line = 2\n)\n```\n\n::: {.cell-output-display}\n![](clustering_files/figure-html/baker-bin-1.png){width=672}\n:::\n:::\n\n\nNow we run a valued blockmodel on the original data. The parameter `preSpecM` is set to the median of the non-zero entries and defines a kind of cutoff for when to consider a value high enough to be a block internal tie.\n\n::: {.cell}\n\n```{.r .cell-code}\nres_baker_valued <- optRandomParC(\n    M = baker, k = 3, rep = 1000,\n    preSpecM = 13, approach = \"val\", blocks = c(\"nul\", \"com\"),\n    nCores = 0\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: doRNG\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in optRandomParC(M = baker, k = 3, rep = 1000, preSpecM = 13, approach\n= \"val\", : useLB not set and now set to TRUE. parLapplyLB will be used. Results\nwill not be reproducible.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\nOptimization of all partitions completed\n1 solution(s) with minimal error = 626 found. \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nIM(res_baker_valued)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]  [,2]  [,3] \n[1,] \"nul\" \"nul\" \"com\"\n[2,] \"nul\" \"nul\" \"nul\"\n[3,] \"com\" \"nul\" \"com\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n    res_baker_valued,\n    main = \"Baker Valued Network Data\",\n    mar = c(1, 2, 3, 1), title.line = 2\n)\n```\n\n::: {.cell-output-display}\n![](clustering_files/figure-html/baker-val-1.png){width=672}\n:::\n:::\n\n\n### References\n\nÅ½iberna, A. (2007). Generalized Blockmodeling of Valued Networks. Social Networks, 29(1), 105-126. doi: 10.1016/j.socnet.2006.04.002\n\nÅ½iberna, A. (2008). Direct and indirect approaches to blockmodeling of valued networks in terms of regular equivalence. Journal of Mathematical Sociology, 32(1), 57-84. doi: 10.1080/00222500701790207\n\nÅ½iberna, A. (2014). Blockmodeling of multilevel networks. Social Networks, 39(1), 46-61. doi: 10.1016/j.socnet.2014.04.002\n\n## Core-Periphery",
    "supporting": [
      "clustering_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}