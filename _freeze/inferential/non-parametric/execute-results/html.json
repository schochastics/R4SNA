{
  "hash": "f5540f27ea42cbe4353df03c9e41fb62",
  "result": {
    "engine": "knitr",
    "markdown": "# Non-Parametric Methods\n\nA common non-parametric technique is permutation testing, where the observed network is systematically altered‚Äîtypically by shuffling ties while preserving certain properties, such as the number of connections each node has. This process creates a reference distribution under the null hypothesis, allowing researchers to assess whether observed patterns (like high clustering or assortativity) are statistically significant or could have arisen by chance.\n\nImportantly, in non-parametric frameworks, p-values retain their traditional interpretation. They represent the probability of observing network features as extreme as those found in the data if the null hypothesis were true. This familiar statistical grounding makes non-parametric tests both intuitive and flexible.\n\nNon-parametric methods are particularly valuable during the exploratory phase of research, for validating parametric models, and in contexts where theoretical models are either undeveloped or poorly understood.\n\n\n## Packages Needed for this Chapter\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(statnet)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(graphlayouts)\nlibrary(intergraph)\nlibrary(patchwork)\nlibrary(networkdata)\n```\n:::\n\n\n## Conditional Uniform Graph Distributions (CUGs)\n\nOne widely used non-parametric approach is the **Conditional Uniform Graph Distribution (CUG)**. CUGs define a reference distribution of graphs generated uniformly at random, but conditioned on one or more fixed characteristics of the observed network, such as the number of nodes, total number of edges, or degree distribution. By preserving these basic structural features, CUGs enable researchers to assess whether a more complex pattern (e.g., high reciprocity, homophily, or transitivity) is likely to have arisen by chance given the observed constraints.\n\nWhy do we do this? Well, in network analysis, statistical inference relies on some form of randomness; we assume that if a structure emerges more often than we would expect under random conditions, it likely reflects an underlying social mechanism. A **CUG distribution** formalizes this by defining a uniform distribution over a set of graphs, where each graph satisfies a fixed constraint, such as the same number of edges, node degrees, or dyadic relationships.\n\nFor example, if a network displays unusually high clustering, a CUG test can evaluate whether this is statistically exceptional or simply a byproduct of the network's size and density. By comparing the observed statistic to the distribution of values from randomly generated but structurally constrained networks, researchers can determine the significance of the observed pattern. CUGs are especially useful when a full parametric model is unavailable, difficult to specify, or when the goal is to control for known network features while testing specific structural hypotheses.\n\nSeveral types of CUGs can be defined:\n\n- **ùí∞ |E(L)**: All graphs with the same number of edges as the observed graph.\n- **ùí∞ |d**: All graphs with the same degree distribution $d = (d_1, d_2, ..., d_n)$.\n- **ùí∞ |MAN**: All graphs with the same dyad census (i.e., counts of mutual, asymmetric, and null ties).\n\nFor example, in a CUG with fixed density (number of edges), each graph that meets the constraint is equally probable. Graphs that do not satisfy the constraint (e.g., different number of ties) are assigned a probability of zero. This results in a **null model** that is tightly defined and suitable for hypothesis testing.\n\n\n\n## Hypothesis Testing Procedure\n\nThe process follows classical null hypothesis testing logic:\n\n- **Null Hypothesis ($H_{0}$):**  The observed network is drawn from a CUG model that preserves a given constraint (e.g., edge count).\n- **Alternative Hypothesis ($H_{1}$):** The observed network structure is not typical under this model and thus suggests a non-random social mechanism.\n\nTo test $H_0$ we follow the below steps:\n\n1. Define a summary statistic (e.g., degree centralization, reciprocity or transitivity).\n2. Generate a large number of networks from the CUG distribution.\n3. Compute the statistic for each simulated network.\n4. Compare the observed statistic to the simulated distribution for that statistic.\n\nIf the observed value lies in the extreme tails (e.g., below the 2.5th percentile or above the 97.5th), we reject $H_{0}$ at the corresponding 5% significance level, concluding that the observed structure likely reflects a genuine social mechanism rather than random chance. \n\nThe process is visualized in @fig-cugex where the left panel shows the observed network, while the right panel displays the null distribution of the statistic based on 500 randomly generated graphs that preserve the same number of nodes and edges. The dashed red line indicates the observed value. If this value lies in the tail of the distribution, it suggests the observed structure is unlikely to have arisen by chance under the null model.\n\n::: {#fig-cugex .center}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/nullmodel-ex-1.png){fig-align='center' width=960}\n:::\n:::\n\nConditional Uniform Graph (CUG) test of a network statistic of interest.\n\n\n:::\n\n\n\n\n## Running Example\nWe will use a running example, namely `Coleman` [@coleman1964data] which is available as graph object in the `networkdata` package and as an array in `statnet`. We will use these interchangeably depending on the function and package used for our analysis. The data consists of self-reported friendship ties among 73 boys in a small high school in Illinois over the 1957-1958 academic year. Networks of reported ties for all 73 informants are provided for two time points (fall and spring).  We will only focus on the fall network here, which we load and visualize:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data as graph object from networkdata and extract the fall network\ncoleman_g <- networkdata::coleman[[1]]\n\n# plot using gggraph\nggraph(coleman_g, layout = \"stress\") + \n          geom_edge_link(edge_colour = \"#666060\", end_cap = circle(9,\"pt\"), \n                         n = 2, edge_width = 0.4, edge_alpha = 1, \n                         arrow = arrow(angle = 15, \n                         length = unit(0.1, \"inches\"), \n                         ends = \"last\", type = \"closed\"))  +\n          geom_node_point(fill = \"#525252\",colour = \"#FFFFFF\", \n                           size = 5, stroke = 1.1, shape = 21) + \n          theme_graph() + \n          ggtitle(\"fall friendship network\") +\n          theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/unnamed-chunk-2-1.png){width=1152}\n:::\n:::\n\n\n## Uniform graph distribution given expected density\n\n\n## Uniform graph distribution given number of edges\n\n## Uniform graph distribution given dyad census\n\n## Uniform graph distribution given fixed degree \n\n## Analysing homophily using non-parametric null distribution\n\n\n## References {.unnumbered}\n\n\n::: {#refs}\n:::",
    "supporting": [
      "non-parametric_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}