{
  "hash": "972172835ae8aab124dcf5d4d2e9ca38",
  "result": {
    "engine": "knitr",
    "markdown": "# Non-Parametric Methods\n\nA common non-parametric technique is permutation testing, where the observed network is systematically altered‚Äîtypically by shuffling ties while preserving certain properties, such as the number of connections each node has. This process creates a reference distribution under the null hypothesis, allowing researchers to assess whether observed patterns (like high clustering or assortativity) are statistically significant or could have arisen by chance.\n\nImportantly, in non-parametric frameworks, $p$-values retain their traditional interpretation. They represent the probability of observing network features as extreme as those found in the data if the null hypothesis were true. This familiar statistical grounding makes non-parametric tests both intuitive and flexible.\n\nNon-parametric methods are particularly valuable during the exploratory phase of research, for validating parametric models, and in contexts where theoretical models are either undeveloped or poorly understood.\n\n\n## Packages Needed for this Chapter\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(statnet)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(graphlayouts)\nlibrary(patchwork)\nlibrary(networkdata)\nlibrary(tidyverse)\n```\n:::\n\n\n## Conditional Uniform Graph Distributions (CUGs)\n\nOne widely used non-parametric approach is the **Conditional Uniform Graph Distribution (CUG)**. CUGs define a reference distribution of graphs generated uniformly at random, but conditioned on one or more fixed characteristics of the observed network, such as the number of nodes, total number of edges, or degree distribution. By preserving these basic structural features, CUGs enable researchers to assess whether a more complex pattern (e.g., high reciprocity, homophily, or transitivity) is likely to have arisen by chance given the observed constraints.\n\nWhy do we do this? Well, in network analysis, statistical inference relies on some form of randomness; we assume that if a structure emerges more often than we would expect under random conditions, it likely reflects an underlying social mechanism. A **CUG distribution** formalizes this by defining a uniform distribution over a set of graphs, where each graph satisfies a fixed constraint, such as the same number of edges, node degrees, or dyadic relationships.\n\nFor example, if a network displays unusually high clustering, a CUG test can evaluate whether this is statistically exceptional or simply a byproduct of the network's size and density. By comparing the observed statistic to the distribution of values from randomly generated but structurally constrained networks, researchers can determine the significance of the observed pattern. CUGs are especially useful when a full parametric model is unavailable, difficult to specify, or when the goal is to control for known network features while testing specific structural hypotheses.\n\nSeveral types of CUGs can be defined:\n\n- **ùí∞ |E(L)**: All graphs with the same density as the observed graph.\n- **ùí∞ |L**: All graphs with the same number of edges as the observed graph.\n- **ùí∞ |d**: All graphs with the same degree distribution $d = (d_1, d_2, ..., d_n)$.\n- **ùí∞ |MAN**: All graphs with the same dyad census (i.e., counts of mutual, asymmetric, and null ties).\n\nFor example, in a CUG with fixed density (number of edges), each graph that meets the constraint is equally probable. Graphs that do not satisfy the constraint (e.g., different number of ties) are assigned a probability of zero. This results in a **null model** that is tightly defined and suitable for hypothesis testing.\n\n\n\n## Hypothesis Testing Procedure\n\nThe process follows classical null hypothesis testing logic:\n\n- **Null Hypothesis ($H_{0}$):**  The observed network is drawn from a CUG model that preserves a given constraint (e.g., edge count).\n- **Alternative Hypothesis ($H_{1}$):** The observed network structure is not typical under this model and thus suggests a non-random social mechanism.\n\nTo test $H_0$ we follow the below steps:\n\n1. Define a summary statistic (e.g., degree centralization, reciprocity or transitivity).\n2. Generate a large number of networks from the CUG distribution.\n3. Compute the statistic for each simulated network.\n4. Compare the observed statistic to the simulated distribution for that statistic.\n\nIf the observed value lies in the extreme tails (e.g., below the 2.5th percentile or above the 97.5th), we reject $H_{0}$ at the corresponding 5% significance level, concluding that the observed structure likely reflects a genuine social mechanism rather than random chance. Since the tests are actually **non-parametric (Monte Carlo)** tests,  we can estimate the $p$-value as the proportion of simulated test statistics that are as extreme or more extreme than the observed value. This provides a data-driven way to assess whether the observed statistic is likely under the null model, allowing for hypothesis testing without strong distributional assumptions.\n\nThe process is visualized in @fig-cugex where the left panel shows the observed network, while the right panel displays the null distribution of the statistic based on 500 randomly generated graphs that preserve the same number of nodes and edges. The dashed red line indicates the observed value. If this value lies in the tail of the distribution, it suggests the observed structure is unlikely to have arisen by chance under the null model.\n\n::: {#fig-cugex .center}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/nullmodel-ex-1.png){fig-align='center' width=960}\n:::\n:::\n\nConditional Uniform Graph (CUG) test of a network statistic of interest.\n\n\n:::\n\n\n\n\n## Running Example\nWe will use a running example, namely `Coleman` [@coleman1964data] which is available as graph object in the **networkdata** package and as an array in **statnet** (or more specifically **sna**). We will use these interchangeably depending on the function and package used for our analysis. The data consists of self-reported friendship ties among 73 boys in a small high school in Illinois over the 1957-1958 academic year. Networks of reported ties for all 73 informants are provided for two time points (fall and spring).  We will only focus on the fall network here, which we load and visualize:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data as graph object from networkdata and extract the fall network\ncoleman_g <- networkdata::coleman[[1]]\n\n# plot using gggraph\nggraph(coleman_g, layout = \"stress\") + \n          geom_edge_link(edge_colour = \"#666060\", end_cap = circle(9,\"pt\"), \n                         n = 2, edge_width = 0.4, edge_alpha = 0.7, \n                         arrow = arrow(angle = 15, \n                         length = unit(0.1, \"inches\"), \n                         ends = \"last\", type = \"closed\"))  +\n          geom_node_point(fill = \"#525240\",color = \"#FFFFFF\", \n                           size = 5, stroke = 1.1, shape = 21) + \n          theme_graph() + \n          ggtitle(\"fall friendship network\") +\n          theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/unnamed-chunk-2-1.png){width=1152}\n:::\n:::\n\n\n\n## Uniform Graph Distribution Given Expected Density\nHere, we simulate graoh distributions while keeping the expected frequency from the observed network fixed. We aim to answer the follwoing quesiton: *do we observed significantly many more reciporcal ties in our observed than what is expected by pure chance given random networks of the same expected density?* So the statistic of interested here is number of reciprocal ties which we obtain from dyad census:\n\n::: {.cell}\n\n```{.r .cell-code}\ndyad_census(coleman_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$mut\n[1] 62\n\n$asym\n[1] 119\n\n$null\n[1] 2447\n```\n\n\n:::\n\n```{.r .cell-code}\n# alterantiver one can also use the below\nsum(which_mutual(coleman_g)) / 2 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62\n```\n\n\n:::\n:::\n\nThe number of reciprocal ties is equal to 62. In order to compute this density, we can use the **igraph** function `edge_density()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndensity_obs <- edge_density(coleman_g)\n```\n:::\n\nFurther we save number of nodes and edges of the observed network:\n\n::: {.cell}\n\n```{.r .cell-code}\nn_nodes <- vcount(coleman_g)\n```\n:::\n\n\nTo simulate the null distribution we use the function **igraph** from the `sample_gnp` package. We simulate 1000 random networks with the parameters specified above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate 1000 random graphs with same density\nset.seed(123)\nsim_g_dens <- replicate(1000, {\n  sample_gnp(n = n_nodes, p = density_obs, directed = TRUE, loops = FALSE)\n}, simplify = FALSE)\n```\n:::\n\nNote that the output consists of 1000 randomly generated networks as graph objects. While each individual simulated network may not contain exactly the same number of edges as the observed network, they are **stochastically equivalent** in terms of overall density.\n\nWe then compute the number of reciprocal (mutual) ties in each simulated network and visualize the resulting distribution under the null model of random tie allocation in @fig-cug-density. A red dashed line is included in the plot to indicate the number of mutual ties observed in the actual network (62), highlighting how it compares to the distribution expected by chance.\n\n::: {#fig-cug-density .center}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define mutual tie counter \ncount_mutual <- function(g) {\n  sum(which_mutual(g)) / 2\n}\n\n# Apply to all simulated igraph objects\nmutual_counts <- sapply(sim_g_dens, count_mutual)\n\n# Create data frame\nmutual_df <- data.frame(mutual_ties = mutual_counts)\n\n# Plot\nggplot(mutual_df, aes(x = mutual_ties)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = dyad_census(coleman_g)$mut, color = \"firebrick3\", linetype = \"dashed\") +\n  annotate(\"text\", x = dyad_census(coleman_g)$mut, y = Inf, label = \"Observed\", \n           vjust = -0.5, hjust = 1.1, color = \"firebrick3\", angle = 90) +\n  labs(title = \" \",\n       x = \"Number of Mutual Ties\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-given-dens-1.png){fig-align='center' width=480}\n:::\n:::\n\nEmpirical distribution of reciprocal ties obtained from 1,000 random directed networks generated under the Conditional Uniform Graph (CUG) null model, holding constant the number of nodes and density (or expected number of edges). The vertical dashed line shows the number of mutual ties observed in the actual network, highlighting its deviation from the null model.\n:::\n\nAs shown in the plot, the observed number of mutual ties falls far in the right tail of the distribution. This indicates a substantial deviation from what would be expected under random tie formation. This can be interpreted as follows:\n\n> *If ties in the network were allocated completely at random‚Äîwhile preserving the overall density‚Äîit would be highly unlikely to observe as many reciprocal ties as we do in the actual network.*\n\nStated more formally, this analysis serves as a test of the following null hypothesis:\n\n> $H_0$: The number of mutual ties in the observed network does not differ from what would be expected under random tie formation, given the observed network density.\n\n> $H_1$: The observed number of mutual ties is significantly greater than expected by chance, indicating a tendency toward reciprocity beyond what density alone would predict.\n\nSince the observed number of mutual ties falls far in the right tail of the simulated distribution, we see a clear and substantial deviation from the null model.  Therefore, we  reject the null hypothesis, concluding that the observed network exhibits significantly more reciprocity than would be expected by random chance alone. This indicates a strong tendency for mutual connections in the network that is not explained by density alone.\n\nIn order to compute the $p$-value, we compare the observed value to the distribution from the simulated null model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empirical p-value (proportion of simulated mutual counts >= observed)\np_value <- mean(mutual_counts >= dyad_census(coleman_g)$mut)\np_value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\nUnsurprisingly, this value is equal to zero, as we do not have any part of the distribution ranging over the observed count. However, $p$-values from Monte Carlo tests are never exactly 0, but rather ‚Äúless than 1 / number of simulations‚Äù, so a more correct statement would be that \n\n> $p$ < 0.001 (based on 1,000 simulations)  providing very strong evidence against the null hypothesis.\n\n::: {.callout-note collapse=false}\n## Note\nThe `rgraph()` function from the **sna** (or **statnet**) package can also be used to simulate random networks with a specified expected density. However, note that its output consists of adjacency matrices (as a 3D array or list), rather than `igraph` graph objects. This requires additional conversion before applying `igraph`-based analyses.\n:::\n\n## Uniform Graph Distribution Given Number of Edges\nIn this section, we perform the same test but condition the random networks generated on the **exact** number of edges. So out null world is now stated as\n\n> $H_0$: The number of mutual ties in the observed network is consistent with what would be expected under random edge assignment, given a fixed number of nodes and edges.\n\nTo simulate this null distribution under this new constraint, we generate 1000 random networks using the `sample_gnm()` function from the `igraph` package, which samples graphs with a fixed number of edges.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)  \n# Parameters from the observed network\nn_nodes <- vcount(coleman_g)\nn_edges <- ecount(coleman_g)\n\n# Simulate 1000 random directed graphs with fixed number of edges\nsim_g_edges <- replicate(1000, {\n  g <- sample_gnm(n = n_nodes, m = n_edges, directed = TRUE, loops = FALSE)\n  as_adjacency_matrix(g, sparse = FALSE)\n}, simplify = FALSE)\n```\n:::\n\n\nNote that each simulated network has exactly the same number of edges as the observed network, ensuring that any difference in mutual ties arises from the pattern of connections, not their quantity. We then compute the number of mutual ties in each simulated network and visualize the distribution, shown in @fig-cug-edges:\n\n::: {#fig-cug-edges .center}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define mutual tie counting function\ncount_mutual <- function(adj_matrix) {\n  g <- graph_from_adjacency_matrix(adj_matrix, mode = \"directed\")\n  sum(which_mutual(g)) / 2\n}\n\n# Apply to all simulated graphs\nmutual_counts_edges <- sapply(sim_g_edges, count_mutual)\n\n# Plot the distribution\nmutual_df_edges <- data.frame(mutual_ties = mutual_counts_edges)\n\nggplot(mutual_df_edges, aes(x = mutual_ties)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = dyad_census(coleman_g)$mut, \n             color = \"firebrick3\", linetype = \"dashed\") +\n  annotate(\"text\", x = dyad_census(coleman_g)$mut, y = Inf, label = \"Observed\", \n           vjust = -0.5, hjust = 1.1, color = \"firebrick3\", angle = 90) +\n  labs(title = \" \",\n       x = \"Number of Mutual Ties\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-given-edge-1.png){fig-align='center' width=480}\n:::\n:::\n\nEmpirical distribution of reciprocal ties obtained from 1,000 random directed networks generated under the Conditional Uniform Graph (CUG) null model, holding constant the number of nodes and edges. The vertical dashed line shows the number of mutual ties observed in the actual network, highlighting its deviation from the null model.\n:::\n\n\nThe results are very similar to earlier; the observed number of mutual ties lies in the extreme right tail of the simulated distribution. This suggests a strong deviation from what would be expected under the null model of randomly assigned edges with no structural bias toward reciprocity.\n\n::: {.callout-note collapse=false}\n## Note\nThe `rgnm()` function from the **sna** (or **statnet**) package can also be used to simulate random networks with a specified expected density. However, note again that its output consists of adjacency matrices (as a 3D array or list).\n:::\n\n## Uniform Graph Distribution Given Dyad Census\nGiven the results above where we tested for reciprocity using CUG null models that preserved either network density or the total number of edges‚Äîwe now move to a more constrained and informative baseline: null models conditioned on dyadic structure. Specifically, we consider CUG tests based on the dyad census, which preserve the number of mutual, asymmetric, and null dyads observed in the original network. This means that the basic dyadic processes, such as the overall tendency toward reciprocity, are held constant in the simulated networks.\n\nBecause mutual ties are fixed across all networks under this null model, the number of reciprocal ties can no longer be used as a test statistic (it will be identical in every simulation). As a result, we shift our focus to higher-order structural properties that emerge from patterns of connected dyads. One such property is **transitivity** (or triadic closure), which captures the tendency for actors who share a common partner to also be directly connected.\n\nBy conditioning on the dyad census and evaluating statistics like transitivity, we can assess whether the observed network exhibits more complex structural organization than would be expected by chance, even after accounting for baseline dyadic tendencies.\n\nOur null hypothesis is now defined as:\n\n>  $H_0$: The number of complete triangles (transitive triads) observed in the network does not differ from what would be expected under random tie allocation, conditional on the observed dyadic processes (i.e., mutual, asymmetric, and null dyad frequencies).\n\nCan we then say that there are more complete triangles than we expect by chance? Just how likely or unlikely is it to observe this many triangles? In order to answer this we again need to produce the world of hypothetical networks by simulation.\n\n::: {.callout-note collapse=false}\n## Note\nSince **igraph** does not currently provide a function to generate random graphs with a fixed dyad census, we make use of `rguman()` from the **sna** package, and then convert them to graph objects, and use `igraph::triad_census()` to compute the triad-level statistics.\n:::\n\nIn directed netowrks, there are two triad types cprresponding to closed triads MAN-030 and MAN-300.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) \n# Generate 1000 graphs with fixed dyad census using rguman (from sna)\nsim_nets_man <- rguman(n = 1000, nv = n_nodes, \n                        mut =  dyad_census(coleman_g)$mut, \n                        asym = dyad_census(coleman_g)$asym, \n                        null = dyad_census(coleman_g)$null, \n                        method = \"exact\")\n\n# Convert to igraph objects\nsim_g_man <- lapply(1:dim(sim_nets_man)[1], function(i) {\n  graph_from_adjacency_matrix(sim_nets_man[i,,], mode = \"directed\")\n})\n\n# Get observed triad counts by index\nobs_triad <- triad_census(coleman_g)\nobs_030T <- obs_triad[9]   # position of 030T\nobs_300  <- obs_triad[16]  # position of 300\n\n# sim_graphs: list of igraph directed networks\nsim_g_tc <- t(sapply(sim_g_man, triad_census))\nsim_g_tc_df <- as.data.frame(sim_g_tc)\n\n# Extract simulated triad counts \ntriad_df <- sim_g_tc_df %>%\n  select(9, 16) %>%\n  rename(`Triad 030T` = 1, `Triad 300` = 2) %>%\n  pivot_longer(cols = everything(), names_to = \"Triad_Type\", values_to = \"Count\")\n\n# Create observed values for vertical lines\nobs_df <- data.frame(\n  Triad_Type = c(\"Triad 030T\", \"Triad 300\"),\n  Count = c(obs_030T, obs_300)\n)\n```\n:::\n\nNow we have everything set to plot out the results as before to test out hypothesis. The results are shown in @fig-cug-man.\n\n::: {#fig-cug-man .center}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(triad_df, aes(x = Count)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"white\") +\n  geom_vline(data = obs_df, aes(xintercept = Count), color = \"firebrick3\", linetype = \"dashed\") +\n  geom_text(data = obs_df, aes(x = Count, y = Inf, label = \"Observed\"),\n            angle = 90, vjust = -0.5, hjust = 1.1, color = \"firebrick3\") +\n  facet_wrap(~Triad_Type, scales = \"free\") +\n  labs(title = \" \",\n       x = \"Triad Counts\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-given-MAN-1.png){fig-align='center' width=960}\n:::\n:::\n\nDistributions of two types of closed triads, 030T (one mutual and two asymmetric ties) and 300 (three mutual ties), across 1000 randomly generated directed networks with a fixed dyad census. The red dashed lines indicate the counts of each triad type observed in the actual network. These plots assess whether the observed levels of triadic closure (23 and 22) deviate significantly from what would be expected under a null model that preserves mutual, asymmetric, and null dyads.\n::: \n  \n## Uniform Graph Distribution Given Fixed Degree \nIs the average geodesic distance in the observed network significantly shorter (or longer) than would be expected in random networks with the same in- and out-degree sequence? To answer this we turn to uniform graph distribution given fixed degree. The null world correspond now to the following:\n\n>  $H_0$: The average geodesic distance observed in the network is consistent with what would be expected under random graphs that preserve the in- and out-degree sequence.\n\nThis CUG test here evaluates whether the observed network is more (or less) efficiently connected than expected under degree-preserving randomization. The results are run and visualized below in @fig-cug-deg.\n\n::: {#fig-cug-deg .center}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Extract in-degree and out-degree from observed network\nin_deg <- igraph::degree(coleman_g, mode = \"in\")\nout_deg <- igraph::degree(coleman_g, mode = \"out\")\n\n# Compute observed average geodesic distance (exclude disconnected pairs)\nobs_dist <- mean_distance(coleman_g, directed = TRUE, unconnected = TRUE)\n\n# Simulate 1000 graphs preserving degree sequence\nset.seed(123)\nsim_deg_graphs <- replicate(1000, sample_degseq(out.deg = out_deg, \n                                                in.deg = in_deg,\n                                                method = \"configuration\"), \n                                                simplify = FALSE)  \n\n# Compute average geodesic distance for each simulation\nsim_geodist <- sapply(sim_deg_graphs, function(g) {\n  mean_distance(g, directed = TRUE, unconnected = TRUE)\n})\n\n# Create data frame\ngeodist_df <- data.frame(avg_geodist = sim_geodist)\n\n# Plot\nggplot(geodist_df, aes(x = avg_geodist)) +\n  geom_histogram(binwidth = 0.05, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = obs_dist, color = \"firebrick3\", linetype = \"dashed\") +\n  annotate(\"text\", x = obs_dist, y = Inf, label = \"Observed\",\n           angle = 90, vjust = -0.5, hjust = 1.1, color = \"firebrick3\") +\n  labs(title = \" \",\n       x = \"Average Geodesic Distance\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-given-deg-1.png){fig-align='center' width=480}\n:::\n:::\n\nDistribution of average geodesic distance across 1000 random directed graphs preserving the in- and out-degree sequences of the observed network. The red dashed line indicates the observed value. \n:::\n\nThis indicates that the observed network is significantly more efficiently connected (in terms of shortest paths) than what would be expected under random edge arrangement, given the same degree distribution. In other words, the network‚Äôs structure enables actors to reach one another more quickly than random networks with the same node-level connectivity.\n\n## Analysing Homophily Using Non-Parametric Null Distribution\n\nTo illustrate how we can test for homophily using a non-paramtric approach, we turn to another data set with available node attributes, namely the one by @lazega2001collegial. This data set comes from a network study of corporate law partnership that was carried out in a Northeastern US corporate law firm, referred to as SG&R, 1988-1991 in New England. It includes (among others) measurements of networks among the 71 attorneys (partners and associates) of this firm, i.e. their coworker network, advice network, friendship network, and indirect control networks. Various members' attributes are also part of the dataset, including seniority, formal status, office in which they work, gender, lawschool attended.\n\nTwo tests will be performed:\n\n-  Test 1: Friendship based on gender\n-  Test 2: Cowork among partners based on law practice\n\nThese two networks that are used in the following are visualized in @fig-lawnets.\n\n\n::: {#fig-lawnets .center}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/lawyer-plot1-1.png){fig-align='center' width=960}\n:::\n:::\n\nVisualization of two relational networks among lawyers in the Lazega dataset.\nTop: The friendship network, with nodes colored by gender.\nBottom: The symmetrized coworking network among the 36 law firm partners, with nodes colored by practice area.\n:::\n\n### Test 1: Friendship based on gender {.unnumbered}\nFirst, we examine gender-based homophily in a friendship network among corporate lawyers from the Lazega dataset. We load the data as a graph object from  the package **networkdata** and vizualize it, with node color representing gender:\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_friends_g <-  networkdata::law_friends\n```\n:::\n\n\nWe are here testing the following\n\n> $H_0$: The number of same-gender ties in the network is consistent with a random distribution of ties (given network size and density).\n\n> $H_1$: The observed network has significantly more (or fewer) same-gender ties than expected by chance.\n\nTo answer this, we use a non-parametric test based on randomly generated networks that match the observed network in size and density. This is effectively a CUG test under the null model **ùí∞ |L**, where ties are randomly distributed.\n\nWe start by converting the friendship network to an adjacency matrix and extracting the gender attribute from the nodes:\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_mat <- as.matrix(as_adjacency_matrix(law_friends_g, sparse = FALSE))\nlaw_nodes <- vcount(law_friends_g)\nlaw_edges <- sum(law_mat)\nlaw_gender <- V(law_friends_g)$gender # gender extracted\n```\n:::\n\n\nThen, we compute the number of observed homophilous ties (same-gender friendships) in the observed network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1 = male, 2 = female\nhomoph_obs <- sum(law_mat[law_gender == 1, law_gender == 1]) +\n              sum(law_mat[law_gender == 2, law_gender == 2])\n```\n:::\n\n\n\nTo generate networks from the null world, we simulate 1000 random directed graphs with the same number of nodes and edges as the observed network and then compute the number of homophilous ties in each simulated network (assuming the same ordering of gender assignments to nodes in each simulated network):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nlaw_sim_g <- replicate(1000, {\n  g <- sample_gnm(n = law_nodes, m = law_edges, directed = TRUE, loops = FALSE)\n  as_adjacency_matrix(g, sparse = FALSE)\n}, simplify = FALSE)\n\nhomoph_sim <- sapply(law_sim_g, function(mat) {\n  sum(mat[law_gender == 1, law_gender == 1]) +\n  sum(mat[law_gender == 2, law_gender == 2])\n})\n```\n:::\n\n\nAs before, we can create a histogram of the simulated homophilous tie counts and mark the observed value, as shown in @fig-cug-hom1:\n\n::: {#fig-cug-hom1 .center}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhomoph_df <- data.frame(homophilous_ties = homoph_sim)\n\nggplot(homoph_df, aes(x = homophilous_ties)) +\n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = homoph_obs, color = \"firebrick3\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = homoph_obs, y = Inf, label = \"Observed\",\n           vjust = -0.5, hjust = 1.1, angle = 90, color = \"firebrick3\") +\n  labs(title = \" \",\n       x = \"Number of Homophilous Ties\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-hom-1.png){fig-align='center' width=480}\n:::\n:::\n\nDistribution of same-gender friendship ties in 1000 random directed graphs preserving the number of nodes and total number of ties. The red dashed line marks the number of same-gender ties in the observed network. \n::: \n\nThe empirical $p$-value is computed as\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(homoph_sim >= homoph_obs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\nwhich implies that we reject the null hypothesis, concluding that gender-based homophily exists in the friendship network.\n\n### Test 2: Cowork among partners based on law practice {.unnumbered}\nOur second test is whether partners in the law firm are more likely to collaborate (cowork) with others who share the same practice area (litigation or corporate) than we would expect by chance. This is a test of homophily based on professional specialization.\n\nWe begin by loading the `law_cowork` network from the **networkdata** package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlaw_cw_g <- networkdata::law_cowork\n```\n:::\n\n\nWe restrict the analysis to the first 36 lawyers, corresponding to the partners of the firm (as indicated by their ‚Äústatus‚Äù attribute). \n\nThe follwing hypotheses can be stated:\n\n> $H_0$:  The number of same-practice coworking ties is consistent with a random distribution of ties, given number of ties and edges of the network.\n\n> $H_1$: The observed number of same-practice ties is significantly greater than expected under random conditions; suggesting homophily based on professional specialization.\n\nSince coworking is a reciprocal relationship, we treat the network as undirected by symmetrizing the adjacency matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an adjacency matrix\nlaw_mat_cwdir <- as.matrix(as_adjacency_matrix(law_cw_g, sparse = FALSE))\nlaw_mat_cwdir <- law_mat_cwdir[1:36, 1:36]\n\n# Symmetrize to create undirected matrix (co-ties must be mutual)\nlaw_mat_cw <- (law_mat_cwdir == 1 & t(law_mat_cwdir) == 1) * 1\n\nlaw_nodes_cw <- nrow(law_mat_cw)\nlaw_ties_cw <- sum(law_mat_cw) / 2  # undirected: each tie counted twice\n```\n:::\n\nWe now extract the binary attribute practice for each partner and store it as a vector:\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_attr_pract <- V(law_cw_g)$practice[1:36]\n```\n:::\n\nWe define homophilous ties as coworking ties between two lawyers of the same practice area. We count both litigation‚Äìlitigation and corporate‚Äìcorporate ties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_obs_cw <- sum(\n  law_mat_cw[law_attr_pract == 1, law_attr_pract == 1]) / 2 +\n  sum(law_mat_cw[law_attr_pract == 2, law_attr_pract == 2]) / 2\n```\n:::\n\nTo construct the null model, we generate 1000 random undirected graphs with the same number of nodes and total number of ties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(77)\nlaw_sim_cw <- replicate(1000, {\n  g <- sample_gnm(n = law_nodes_cw, m = law_ties_cw, directed = FALSE, loops = FALSE)\n  as_adjacency_matrix(g, sparse = FALSE)\n}, simplify = FALSE)\n```\n:::\n\n\nWe calculate the number of same-practice ties in each simulated graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_sim_cw <- sapply(law_sim_cw, function(mat) {\n  sum(mat[law_attr_pract == 1, law_attr_pract == 1]) / 2 +\n  sum(mat[law_attr_pract == 2, law_attr_pract == 2]) / 2\n})\n```\n:::\n\n\nand finally, plot the null distribution and compare with observed value:\n\n::: {#fig-cug-hom2 .center}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhomoph_sim_df <- data.frame(homophilous_ties = homoph_sim_cw)\n\nggplot(homoph_sim_df, aes(x = homophilous_ties)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"white\") +\n  geom_vline(xintercept = homoph_obs_cw, color = \"firebrick3\", linetype = \"dashed\") +\n  annotate(\"text\", x = homoph_obs_cw, y = Inf, label = \"Observed\",\n           vjust = -0.5, hjust = 1.1, angle = 90, color = \"firebrick3\") +\n  labs(title = \"\",\n       x = \"Number of Homophilous Ties\",\n       y = \"Frequency\") +\n  coord_cartesian(ylim = c(0, 100)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](non-parametric_files/figure-html/CUG-hom2-1.png){fig-align='center' width=480}\n:::\n:::\n\nDistribution of same-practice coworking ties in 1000 random undirected graphs preserving the number of nodes and ties. The red dashed line indicates the observed number of homophilous ties among law firm partners. This test evaluates whether the level of professional homophily (litigation or corporate) is different than what is expected under random tie allocation.\n:::\n\nAs seen in @fig-cug-hom2, we are in the right tail, indicating we arfe observing more homophilous  ties than expected by chance. To formnally test the hypothesis above we can compute the $p$-value:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(homoph_sim_cw >= homoph_obs_cw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002\n```\n\n\n:::\n:::\n\nThus,  there is statistically significant evidence of practice-based homophily among the firm‚Äôs partners.\n\n\n\n## References {.unnumbered}\n\n\n::: {#refs}\n  \n:::",
    "supporting": [
      "non-parametric_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}