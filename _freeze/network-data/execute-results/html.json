{
  "hash": "323860654241c99ad90396caa35b4653",
  "result": {
    "engine": "knitr",
    "markdown": "# Network Data {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n\n\n## Introduction\n\nThis introductory chapter will give a short explanation of key terminology and how network data can be represented. \nThe larger part of the chapter is concerned with representing networks in R using `igraph` and how to construct or read network data. \n\nAfter reading this chapter, you should have a basic understanding of what networks and network data is and how to create network objects in R using `igraph`.\n\n## What is a network?\n\nIn the context of social network analysis, a network is a conceptual and analytical construct to understand, visualize, and examine the (social) relationships and structures that emerge from the interactions among individuals, groups, organizations, or even entire societies. At its core, a network consists of **nodes** (which represent the actors, whether individuals or organizations) and **edges** (which signify the relationships or connections between these actors). These relationships can embody various types of interactions such as communication, friendship, professional ties, or social influence, among others. \n\nNetworks in the social sciences are tools for mapping and quantifying the patterns of social connections, helping to reveal the underlying dynamics of social cohesion, influence, and information flow within a community or society. Through the lens of network theory, analysts can explore how social structures influence behaviors, opportunities, and outcomes for individuals and groups, making it an invaluable approach in sociology, anthropology, political science, and many other disciplines that study social systems and interactions.\n\n## Network representations\n\nThere are several possible ways to express network data. All come with a set of advantages and disadvantages.\n\n### Adjacency Matrix\n\nAn adjacency matrix is a square matrix where the elements indicate whether pairs of vertices in the graph are adjacent or notâ€”meaning, whether they are directly connected by an edge. If the graph has $n$ vertices, the matrix $A$ will be an $n \\times n$ matrix where the entry $A_{ij}$ is $1$ if there is an edge from vertex $i$ to vertex $j$, and $0$ if there is no edge. In the case of weighted graphs the weight of the edge is used. This matrix is symmetric for undirected graphs, indicating that an edge is bidirectional.  \n\n**Pros:**  \n\n- **Simple Representation**: It provides a straightforward and compact way to represent graphs, especially useful for dense graphs where many or most pairs of vertices are connected.\n\n- **Efficient for Edge Lookups**: Checking whether an edge exists between two vertices can be done in constant time, making it efficient for operations that require frequent edge lookups.\n\n- **Easy Implementation of Algorithms**: Many graph algorithms can be easily implemented using adjacency matrices, making it a preferred choice for certain computational tasks.\n\n**Cons:**  \n\n- **Space Inefficiency**: For sparse graphs, where the number of edges is much less than the square of the number of vertices, an adjacency matrix uses a lot of memory to represent a relatively small number of edges.\n\n- **Poor Scalability**: As the number of vertices grows, the size of the matrix grows quadratically, which can quickly become impractical for large graphs.\n\n### Edge List\n\nAn edge list is a matrix where each row indicates an edge. In an undirected graph, an edge is represented by a pair $(i,j)$, indicating a connection between vertices $i$ and $j$. For directed graphs, the order of the vertices in each pair denotes the direction of the edge, from the first vertex to the second. In weighted graphs, a third column can be added to each pair to represent the weight of the edge.\n\n**Pros:**  \n\n- **Space Efficiency for Sparse Graphs**: Edge lists are particularly space-efficient for representing sparse graphs where the number of edges is much lower than the square of the number of vertices, as they only store the existing edges.\n\n- **Simplicity**: The structure is straightforward and easy to understand, making it suitable for simple graph operations and for initial graph representation before processing.\n\n**Cons:**  \n\n- **Inefficient for Edge Lookups**: Checking whether an edge exists between two specific vertices can be time-consuming, as it may require scanning through the entire list, leading to an operation that is linear in the number of edges.\n\n- **Inefficiency in Graph Operations**: Operations like finding all vertices adjacent to a given vertex or checking for connectivity between vertices can be inefficient compared to other representations like adjacency matrices or adjacency lists, especially for dense graphs.\n\n- **Less Suitable for Dense Graphs**: As the number of edges grows, the edge list can become large and less efficient in terms of both space and operation time compared to an adjacency matrix for dense graphs, where the number of edges is close to the maximum possible number of edges.\n\n### Adjacency List\n\nAn adjacency list is a collection of lists, with each list corresponding to the set of adjacent vertices of a given vertex. This means that for every vertex $i$ in the graph, there is an associated list that contains all the vertices $j$ to which $i$ is directly connected. \n\n**Pros:**  \n\n- **Space Efficiency**: Adjacency lists are more space-efficient than adjacency matrices in sparse graphs, as they only store information about the actual connections.\n\n- **Scalability**: This representation scales better with the number of edges, especially for graphs where the number of edges is far less than the square of the number of vertices.\n\n- **Efficiency in Graph Traversal**: For operations like graph traversal or finding all neighbors of a vertex, adjacency lists provide more efficient operations compared to adjacency matrices, particularly in sparse graphs.\n\n**Cons:**  \n\n- **Edge Lookups**: Checking whether an edge exists between two specific vertices can be less efficient than with an adjacency matrix, as it may require traversing a list of neighbors.\n\n- **Variable Edge Access Time**: The time to access a specific edge or to check for its existence can vary depending on the degree of the vertices involved, leading to potentially inefficient operations in certain scenarios.\n\n- **Higher Complexity for Dense Graphs**: In very dense graphs, where the number of edges approaches the number of vertex pairs, adjacency lists can become less efficient in terms of space and time compared to adjacency matrices, due to the overhead of storing a list for each vertex.\n\n## Importing Network Data\n\n### Foreign Formats\n\n`igraph` can deal with many different foreign network formats with the function `read_graph`.\n(The `rgexf` package can be used to import Gephi files.)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_graph(\n  file,\n  format = c(\n    \"edgelist\",\n    \"pajek\",\n    \"ncol\",\n    \"lgl\",\n    \"graphml\",\n    \"dimacs\",\n    \"graphdb\",\n    \"gml\",\n    \"dl\"\n  ),\n  ...\n)\n```\n:::\n\n\n\n\nIf your network data is in one of the above formats you will find it easy to import\nyour network. \n\n### Nodes, Edges, and Attributes\n\nIf your data is not in a network file format, you will need one of the following functions to turn raw network data into an `igraph` object:\n`graph_from_edgelist()`, `graph_from_adjacency_matrix()`, `graph_from_adj_list()`, or\n`graph_from_data_frame()`.\n\nBefore using these functions, however, you still need to get the raw data into R. The concrete procedure\ndepends on the file format. If your data is stored as an excel spreadsheet, you need additional packages.\nIf you are familiar with the `tidyverse`, you can use the `readxl` package. Other options are, e.g. the `xlsx` package.\n\nMost network data you'll find is in a plain text format (csv or tsv), either as an edgelist or adjacency matrix.\nTo read in such data, you can use base R's `read.table()`.\n\nMake sure you check the following before trying to load a file: Does it contain a header (e.g. row/column names of an adjacency matrix)? How are values delimited (comma, whitespace or tab)? This is important to set the parameters `header`, `sep` to read the data properly.\n\n## Networks in `igraph`\n \nBelow, we represent friendship relations between Bob, Ann, and Steve as a matrix and an edgelist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adjacency matrix\nA <- matrix(\n  c(0, 1, 1, 1, 0, 1, 1, 1, 0),\n  nrow = 3,\n  ncol = 3,\n  byrow = TRUE\n)\n\nrownames(A) <- colnames(A) <- c(\"Bob\", \"Ann\", \"Steve\")\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Bob Ann Steve\nBob     0   1     1\nAnn     1   0     1\nSteve   1   1     0\n```\n\n\n:::\n\n```{.r .cell-code}\n# edgelist\nel <- matrix(\n  c(\"Bob\", \"Ann\", \"Bob\", \"Steve\", \"Ann\", \"Steve\"),\n  nrow = 3,\n  ncol = 2,\n  byrow = TRUE\n)\nel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]  [,2]   \n[1,] \"Bob\" \"Ann\"  \n[2,] \"Bob\" \"Steve\"\n[3,] \"Ann\" \"Steve\"\n```\n\n\n:::\n:::\n\n\n\n\nOnce we have defined an edgelist or an adjacency matrix, we can turn them into `igraph` objects as follows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng1 <- graph_from_adjacency_matrix(A, mode = \"undirected\", diag = FALSE)\n\ng2 <- graph_from_edgelist(el, directed = FALSE)\n# g1 and g2 are the same graph so only printing g1\ng1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 4f87726 UN-- 3 3 -- \n+ attr: name (v/c)\n+ edges from 4f87726 (vertex names):\n[1] Bob--Ann   Bob--Steve Ann--Steve\n```\n\n\n:::\n:::\n\n\n\n\nThe printed summary shows some general descriptives of the graph.\nThe string \"UN--\" in the first line indicates that the network is *U*ndirected (*D* for directed graphs) and has a *N*ame attribute (we named the nodes Bob, Ann, and Steve). The third and forth character are *W*, if there is a edge weight attribute, and *B* if the network is bipartite (there exists a node attribute \"type\"). The following number indicate the number of nodes and edges.\nThe second line lists all graph, node and edge variables. Here, we only have a node attribute \"name\". \n\nThe conversion from edgelist/adjacency matrix into an igraph object is quite straightforward. The only difficulty is setting the parameters correctly (Is the network directed or not?), especially for edgelists where it may not immediately be obvious if the network is directed or not.\n\n\n### Import via `snahelper`\n\nThe R package `snahelper` implements several Addins for RStudio that facilitate working with network data by providing a GUI for various tasks. One of these is the \n`Netreader` which allows to import network data. \n\nThe first two tabs allow you to import raw data (edges and attributes). Make sure to specify file\ndelimiters, etc. according to the shown preview.\n\n![](assets/img/netreader1.png)\n\nUsing the `Netreader` should comes with a learning effect (hopefully).\nThe last tab shows the R code to produce the network with the chosen\ndata **without** using the Addin. \n\n![](assets/img/netreader2.png)\n\nThe network will be saved in your global environment once you click \"Done\".\n\n\n## Scientific reading\n\nWasserman, S., & Faust, K. (1994). Social network analysis: Methods and applications.\n\nScott, J. (2012). What is Social Network Analysis? Bloomsbury Academic.\n",
    "supporting": [
      "network-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}